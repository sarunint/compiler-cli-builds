{"version":3,"file":"perform_compile.js","sourceRoot":"","sources":["../../../../packages/compiler-cli/src/perform_compile.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,gDAAuE;AACvE,yBAAyB;AACzB,6BAA6B;AAC7B,iCAAiC;AAEjC,0CAA0C;AAC1C,kDAAkD;AAClD,8CAA4D;AAE5D,MAAM,MAAM,GAAG,OAAO,CAAC;AAIvB,SAAgB,uBAAuB,CAAC,WAAwB;IAC9D,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,EAAE,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;AAC/E,CAAC;AAFD,0DAEC;AAED,MAAM,iBAAiB,GAA6B;IAClD,mBAAmB,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,mBAAmB,EAAE;IACvD,oBAAoB,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ;IAC1C,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO;CACjC,CAAC;AAEF,SAAS,eAAe,CAAC,QAAgB,EAAE,IAA8B;IACvE,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC;AACxF,CAAC;AAED,SAAgB,wBAAwB,CACpC,QAAkB,EAAE,OAAiC,iBAAiB;IACxE,OAAO,GAAG,eAAe,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,QAAQ,CAAC,IAAI,GAAG,CAAC,IAAI,QAAQ,CAAC,MAAM,GAAC,CAAC,GAAG,CAAC;AAClG,CAAC;AAHD,4DAGC;AAED,SAAgB,6BAA6B,CACzC,KAAiC,EAAE,OAAiC,iBAAiB;IACvF,IAAI,MAAM,GAAG,KAAK,CAAC,WAAW,CAAC;IAC/B,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,IAAI,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC;IACzB,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;IAClC,OAAO,OAAO,EAAE;QACd,MAAM,IAAI,OAAO,CAAC;QAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/B,MAAM,IAAI,IAAI,CAAC;SAChB;QACD,MAAM,IAAI,OAAO,CAAC,WAAW,CAAC;QAC9B,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QAClC,IAAI,QAAQ,EAAE;YACZ,MAAM,IAAI,OAAO,wBAAwB,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC;SAC7D;QACD,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;QACvB,MAAM,EAAE,CAAC;KACV;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AApBD,sEAoBC;AAED,SAAgB,gBAAgB,CAC5B,UAA0B,EAAE,OAAiC,iBAAiB;IAChF,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;IAClC,MAAM,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;IAC7B,IAAI,IAAI,EAAE;QACR,MAAM,IAAI,GAAG,wBAAwB,CAAC;YACpC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG;YAC7B,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACrB,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG;SACvB,EAAE,IAAI,CAAC,IAAI,CAAC;KACd;SAAM,IAAI,UAAU,CAAC,QAAQ,EAAE;QAC9B,MAAM,IAAI,GAAG,wBAAwB,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC;KACtE;IACD,IAAI,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE;QAC9C,MAAM,IAAI,KAAK,UAAU,CAAC,IAAI,CAAC,OAAO,KAAK,UAAU,CAAC,WAAW,GAAG,OAAO,EAAE,CAAC;KAC/E;SAAM,IAAI,UAAU,CAAC,KAAK,EAAE;QAC3B,MAAM,IAAI,GAAG,6BAA6B,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,OAAO,EAAE,CAAC;KACjF;SAAM;QACL,MAAM,IAAI,KAAK,UAAU,CAAC,WAAW,GAAG,OAAO,EAAE,CAAC;KACnD;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAtBD,4CAsBC;AAED,SAAgB,iBAAiB,CAC7B,KAAkB,EAAE,OAAiC,iBAAiB;IACxE,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,EAAE;QACzB,OAAO,KAAK;aACP,GAAG,CAAC,UAAU,CAAC,EAAE;YAChB,IAAI,GAAG,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;gBAClC,OAAO,EAAE,CAAC,iBAAiB,CAAC,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,CAAC;aACjD;iBAAM;gBACL,OAAO,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;aAC3C;QACH,CAAC,CAAC;aACD,IAAI,CAAC,EAAE,CAAC,CAAC;KACf;SAAM;QACL,OAAO,EAAE,CAAC;KACX;AACH,CAAC;AAfD,8CAeC;AAUD,SAAgB,0BAA0B,CAAC,OAAe;IAExD,MAAM,YAAY,GAAG,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IACzD,MAAM,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;IACjF,MAAM,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAClE,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,CAAC,CAAC;IACzD,OAAO,EAAC,WAAW,EAAE,QAAQ,EAAC,CAAC;AACjC,CAAC;AAPD,gEAOC;AAED,SAAgB,uBAAuB,CACnC,QAAgB,EAAE,MAAW,EAAE,SAA6B;IAC9D,yBAAW,SAAS,EAAK,MAAM,CAAC,sBAAsB,IAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,IAAE;AACtF,CAAC;AAHD,0DAGC;AAED,SAAgB,iBAAiB,CAC7B,OAAe,EAAE,eAAoC;IACvD,IAAI;QACF,MAAM,EAAC,WAAW,EAAE,QAAQ,EAAC,GAAG,0BAA0B,CAAC,OAAO,CAAC,CAAC;QAEpE,MAAM,sBAAsB,GACxB,CAAC,UAAkB,EAAE,cAAoB,EAAyC,EAAE;YAClF,MAAM,EAAC,MAAM,EAAE,KAAK,EAAC,GAAG,EAAE,CAAC,cAAc,CAAC,UAAU,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAEvE,IAAI,KAAK,EAAE;gBACT,OAAO,EAAC,KAAK,EAAC,CAAC;aAChB;YAED,kEAAkE;YAClE,wDAAwD;YACxD,MAAM,UAAU,GAAG,cAAc,IAAI,MAAM,CAAC;YAC5C,IAAI,cAAc,EAAE;gBAClB,UAAU,CAAC,sBAAsB,qBAAO,MAAM,CAAC,sBAAsB,EAC7B,UAAU,CAAC,sBAAsB,CAAC,CAAC;aAC5E;YAED,IAAI,MAAM,CAAC,OAAO,EAAE;gBAClB,IAAI,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;gBAChF,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC;oBACpB,GAAG,kBAAkB,OAAO,CAAC;gBAErF,IAAI,EAAE,CAAC,UAAU,CAAC,kBAAkB,CAAC,EAAE;oBACrC,yEAAyE;oBACzE,OAAO,sBAAsB,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;iBAC/D;aACF;YAED,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,CAAC;QAC9B,CAAC,CAAC;QAEN,MAAM,EAAC,MAAM,EAAE,KAAK,EAAC,GAAG,sBAAsB,CAAC,WAAW,CAAC,CAAC;QAE5D,IAAI,KAAK,EAAE;YACT,OAAO;gBACL,OAAO;gBACP,MAAM,EAAE,CAAC,KAAK,CAAC;gBACf,SAAS,EAAE,EAAE;gBACb,OAAO,EAAE,EAAE;gBACX,SAAS,EAAE,GAAG,CAAC,SAAS,CAAC,OAAO;aACjC,CAAC;SACH;QACD,MAAM,eAAe,GAAG;YACtB,yBAAyB,EAAE,IAAI;YAC/B,UAAU,EAAE,EAAE,CAAC,UAAU;YACzB,aAAa,EAAE,EAAE,CAAC,GAAG,CAAC,aAAa;YACnC,QAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ;SAC1B,CAAC;QACF,MAAM,MAAM,GACR,EAAE,CAAC,0BAA0B,CAAC,MAAM,EAAE,eAAe,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAC;QACtF,MAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QAE/D,MAAM,OAAO,GAAG,uBAAuB,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QAC1E,IAAI,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC;QACtC,IAAI,CAAC,CAAC,OAAO,CAAC,gBAAgB,IAAI,OAAO,CAAC,iBAAiB,CAAC,EAAE;YAC5D,SAAS,IAAI,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC;SACrC;QACD,IAAI,OAAO,CAAC,mBAAmB,EAAE;YAC/B,SAAS,GAAG,SAAS,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC;SAChD;QACD,OAAO,EAAC,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,SAAS,EAAC,CAAC;KACrF;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,MAAM,GAAgB,CAAC;gBAC3B,QAAQ,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK;gBACrC,WAAW,EAAE,CAAC,CAAC,KAAK;gBACpB,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,IAAI,EAAE,GAAG,CAAC,kBAAkB;aAC7B,CAAC,CAAC;QACH,OAAO,EAAC,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,SAAS,EAAE,GAAG,CAAC,SAAS,CAAC,OAAO,EAAC,CAAC;KAC5F;AACH,CAAC;AA1ED,8CA0EC;AAQD,SAAgB,kBAAkB,CAAC,KAA8B;IAC/D,IAAI,CAAC,KAAK,IAAI,uBAAuB,CAAC,KAAK,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;QACzD,+DAA+D;QAC/D,OAAO,CAAC,CAAC;KACV;IAED,8CAA8C;IAC9C,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,SAAS,IAAI,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9F,CAAC;AARD,gDAQC;AAED,SAAgB,kBAAkB,CAAC,EAAC,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,YAAY,EAClD,wBAAwB,EACxB,iBAAiB,GAAG,wBAAwB,EAC5C,kBAAkB,EAAE,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC,OAAO,EAUxF;IACC,IAAI,OAA8B,CAAC;IACnC,IAAI,UAAmC,CAAC;IACxC,IAAI,cAAc,GAAwC,EAAE,CAAC;IAC7D,IAAI;QACF,IAAI,CAAC,IAAI,EAAE;YACT,IAAI,GAAG,EAAE,CAAC,kBAAkB,CAAC,EAAC,OAAO,EAAC,CAAC,CAAC;SACzC;QAED,OAAO,GAAG,EAAE,CAAC,aAAa,CAAC,EAAC,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,UAAU,EAAC,CAAC,CAAC;QAEnE,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC/B,cAAc,CAAC,IAAI,CAAC,GAAG,iBAAiB,CAAC,OAAS,CAAC,CAAC,CAAC;QACrD,IAAI,OAAO,CAAC,WAAW,EAAE;YACvB,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC9B,cAAc,CAAC,IAAI,CACf,8BAAuB,CAAC,yBAAyB,UAAU,GAAG,WAAW,KAAK,CAAC,CAAC,CAAC;SACtF;QAED,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE;YAC9B,UAAU;gBACN,OAAS,CAAC,IAAI,CAAC,EAAC,YAAY,EAAE,wBAAwB,EAAE,kBAAkB,EAAE,SAAS,EAAC,CAAC,CAAC;YAC5F,cAAc,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;YAC/C,OAAO,EAAC,WAAW,EAAE,cAAc,EAAE,OAAO,EAAE,UAAU,EAAC,CAAC;SAC3D;QACD,OAAO,EAAC,WAAW,EAAE,cAAc,EAAE,OAAO,EAAC,CAAC;KAC/C;IAAC,OAAO,CAAC,EAAE;QACV,IAAI,MAAc,CAAC;QACnB,IAAI,IAAY,CAAC;QACjB,IAAI,wBAAa,CAAC,CAAC,CAAC,EAAE;YACpB,0EAA0E;YAC1E,MAAM,GAAG,CAAC,CAAC,OAAO,CAAC;YACnB,IAAI,GAAG,GAAG,CAAC,kBAAkB,CAAC;SAC/B;aAAM;YACL,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC;YACjB,mFAAmF;YACnF,OAAO,GAAG,SAAS,CAAC;YACpB,IAAI,GAAG,GAAG,CAAC,kBAAkB,CAAC;SAC/B;QACD,cAAc,CAAC,IAAI,CACf,EAAC,QAAQ,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,WAAW,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,EAAC,CAAC,CAAC;QAC5F,OAAO,EAAC,WAAW,EAAE,cAAc,EAAE,OAAO,EAAC,CAAC;KAC/C;AACH,CAAC;AAxDD,gDAwDC;AACD,SAAS,wBAAwB,CAAC,OAAoB;IACpD,MAAM,cAAc,GAAwC,EAAE,CAAC;IAE/D,SAAS,gBAAgB,CAAC,KAA8B;QACtD,IAAI,KAAK,EAAE;YACT,cAAc,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;YAC9B,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SAC1B;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,qBAAqB,GAAG,IAAI,CAAC;IACjC,8BAA8B;IAC9B,qBAAqB,GAAG,qBAAqB;QACzC,gBAAgB,CAAC,CAAC,GAAG,OAAO,CAAC,sBAAsB,EAAE,EAAE,GAAG,OAAO,CAAC,sBAAsB,EAAE,CAAC,CAAC,CAAC;IAEjG,8BAA8B;IAC9B,qBAAqB;QACjB,qBAAqB,IAAI,gBAAgB,CAAC,OAAO,CAAC,yBAAyB,EAAiB,CAAC,CAAC;IAElG,8DAA8D;IAC9D,qBAAqB;QACjB,qBAAqB;YACrB,gBAAgB,CACZ,CAAC,GAAG,OAAO,CAAC,wBAAwB,EAAE,EAAE,GAAG,OAAO,CAAC,0BAA0B,EAAE,CAAC,CAAC,CAAC;IAE1F,qCAAqC;IACrC,qBAAqB;QACjB,qBAAqB,IAAI,gBAAgB,CAAC,OAAO,CAAC,wBAAwB,EAAiB,CAAC,CAAC;IAEjG,OAAO,cAAc,CAAC;AACxB,CAAC;AAED,SAAS,SAAS,CAAC,KAAkB;IACnC,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,EAAE,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;AACrE,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Position, isSyntaxError, syntaxError} from '@angular/compiler';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport * as api from './transformers/api';\nimport * as ng from './transformers/entry_points';\nimport {createMessageDiagnostic} from './transformers/util';\n\nconst TS_EXT = /\\.ts$/;\n\nexport type Diagnostics = ReadonlyArray<ts.Diagnostic|api.Diagnostic>;\n\nexport function filterErrorsAndWarnings(diagnostics: Diagnostics): Diagnostics {\n  return diagnostics.filter(d => d.category !== ts.DiagnosticCategory.Message);\n}\n\nconst defaultFormatHost: ts.FormatDiagnosticsHost = {\n  getCurrentDirectory: () => ts.sys.getCurrentDirectory(),\n  getCanonicalFileName: fileName => fileName,\n  getNewLine: () => ts.sys.newLine\n};\n\nfunction displayFileName(fileName: string, host: ts.FormatDiagnosticsHost): string {\n  return path.relative(host.getCurrentDirectory(), host.getCanonicalFileName(fileName));\n}\n\nexport function formatDiagnosticPosition(\n    position: Position, host: ts.FormatDiagnosticsHost = defaultFormatHost): string {\n  return `${displayFileName(position.fileName, host)}(${position.line + 1},${position.column+1})`;\n}\n\nexport function flattenDiagnosticMessageChain(\n    chain: api.DiagnosticMessageChain, host: ts.FormatDiagnosticsHost = defaultFormatHost): string {\n  let result = chain.messageText;\n  let indent = 1;\n  let current = chain.next;\n  const newLine = host.getNewLine();\n  while (current) {\n    result += newLine;\n    for (let i = 0; i < indent; i++) {\n      result += '  ';\n    }\n    result += current.messageText;\n    const position = current.position;\n    if (position) {\n      result += ` at ${formatDiagnosticPosition(position, host)}`;\n    }\n    current = current.next;\n    indent++;\n  }\n  return result;\n}\n\nexport function formatDiagnostic(\n    diagnostic: api.Diagnostic, host: ts.FormatDiagnosticsHost = defaultFormatHost) {\n  let result = '';\n  const newLine = host.getNewLine();\n  const span = diagnostic.span;\n  if (span) {\n    result += `${formatDiagnosticPosition({\n      fileName: span.start.file.url,\n      line: span.start.line,\n      column: span.start.col\n    }, host)}: `;\n  } else if (diagnostic.position) {\n    result += `${formatDiagnosticPosition(diagnostic.position, host)}: `;\n  }\n  if (diagnostic.span && diagnostic.span.details) {\n    result += `: ${diagnostic.span.details}, ${diagnostic.messageText}${newLine}`;\n  } else if (diagnostic.chain) {\n    result += `${flattenDiagnosticMessageChain(diagnostic.chain, host)}.${newLine}`;\n  } else {\n    result += `: ${diagnostic.messageText}${newLine}`;\n  }\n  return result;\n}\n\nexport function formatDiagnostics(\n    diags: Diagnostics, host: ts.FormatDiagnosticsHost = defaultFormatHost): string {\n  if (diags && diags.length) {\n    return diags\n        .map(diagnostic => {\n          if (api.isTsDiagnostic(diagnostic)) {\n            return ts.formatDiagnostics([diagnostic], host);\n          } else {\n            return formatDiagnostic(diagnostic, host);\n          }\n        })\n        .join('');\n  } else {\n    return '';\n  }\n}\n\nexport interface ParsedConfiguration {\n  project: string;\n  options: api.CompilerOptions;\n  rootNames: string[];\n  emitFlags: api.EmitFlags;\n  errors: Diagnostics;\n}\n\nexport function calcProjectFileAndBasePath(project: string):\n    {projectFile: string, basePath: string} {\n  const projectIsDir = fs.lstatSync(project).isDirectory();\n  const projectFile = projectIsDir ? path.join(project, 'tsconfig.json') : project;\n  const projectDir = projectIsDir ? project : path.dirname(project);\n  const basePath = path.resolve(process.cwd(), projectDir);\n  return {projectFile, basePath};\n}\n\nexport function createNgCompilerOptions(\n    basePath: string, config: any, tsOptions: ts.CompilerOptions): api.CompilerOptions {\n  return {...tsOptions, ...config.angularCompilerOptions, genDir: basePath, basePath};\n}\n\nexport function readConfiguration(\n    project: string, existingOptions?: ts.CompilerOptions): ParsedConfiguration {\n  try {\n    const {projectFile, basePath} = calcProjectFileAndBasePath(project);\n\n    const readExtendedConfigFile =\n        (configFile: string, existingConfig?: any): {config?: any, error?: ts.Diagnostic} => {\n          const {config, error} = ts.readConfigFile(configFile, ts.sys.readFile);\n\n          if (error) {\n            return {error};\n          }\n\n          // we are only interested into merging 'angularCompilerOptions' as\n          // other options like 'compilerOptions' are merged by TS\n          const baseConfig = existingConfig || config;\n          if (existingConfig) {\n            baseConfig.angularCompilerOptions = {...config.angularCompilerOptions,\n                                                 ...baseConfig.angularCompilerOptions};\n          }\n\n          if (config.extends) {\n            let extendedConfigPath = path.resolve(path.dirname(configFile), config.extends);\n            extendedConfigPath = path.extname(extendedConfigPath) ? extendedConfigPath :\n                                                                    `${extendedConfigPath}.json`;\n\n            if (fs.existsSync(extendedConfigPath)) {\n              // Call read config recursively as TypeScript only merges CompilerOptions\n              return readExtendedConfigFile(extendedConfigPath, baseConfig);\n            }\n          }\n\n          return {config: baseConfig};\n        };\n\n    const {config, error} = readExtendedConfigFile(projectFile);\n\n    if (error) {\n      return {\n        project,\n        errors: [error],\n        rootNames: [],\n        options: {},\n        emitFlags: api.EmitFlags.Default\n      };\n    }\n    const parseConfigHost = {\n      useCaseSensitiveFileNames: true,\n      fileExists: fs.existsSync,\n      readDirectory: ts.sys.readDirectory,\n      readFile: ts.sys.readFile\n    };\n    const parsed =\n        ts.parseJsonConfigFileContent(config, parseConfigHost, basePath, existingOptions);\n    const rootNames = parsed.fileNames.map(f => path.normalize(f));\n\n    const options = createNgCompilerOptions(basePath, config, parsed.options);\n    let emitFlags = api.EmitFlags.Default;\n    if (!(options.skipMetadataEmit || options.flatModuleOutFile)) {\n      emitFlags |= api.EmitFlags.Metadata;\n    }\n    if (options.skipTemplateCodegen) {\n      emitFlags = emitFlags & ~api.EmitFlags.Codegen;\n    }\n    return {project: projectFile, rootNames, options, errors: parsed.errors, emitFlags};\n  } catch (e) {\n    const errors: Diagnostics = [{\n      category: ts.DiagnosticCategory.Error,\n      messageText: e.stack,\n      source: api.SOURCE,\n      code: api.UNKNOWN_ERROR_CODE\n    }];\n    return {project: '', errors, rootNames: [], options: {}, emitFlags: api.EmitFlags.Default};\n  }\n}\n\nexport interface PerformCompilationResult {\n  diagnostics: Diagnostics;\n  program?: api.Program;\n  emitResult?: ts.EmitResult;\n}\n\nexport function exitCodeFromResult(diags: Diagnostics | undefined): number {\n  if (!diags || filterErrorsAndWarnings(diags).length === 0) {\n    // If we have a result and didn't get any errors, we succeeded.\n    return 0;\n  }\n\n  // Return 2 if any of the errors were unknown.\n  return diags.some(d => d.source === 'angular' && d.code === api.UNKNOWN_ERROR_CODE) ? 2 : 1;\n}\n\nexport function performCompilation({rootNames, options, host, oldProgram, emitCallback,\n                                    mergeEmitResultsCallback,\n                                    gatherDiagnostics = defaultGatherDiagnostics,\n                                    customTransformers, emitFlags = api.EmitFlags.Default}: {\n  rootNames: string[],\n  options: api.CompilerOptions,\n  host?: api.CompilerHost,\n  oldProgram?: api.Program,\n  emitCallback?: api.TsEmitCallback,\n  mergeEmitResultsCallback?: api.TsMergeEmitResultsCallback,\n  gatherDiagnostics?: (program: api.Program) => Diagnostics,\n  customTransformers?: api.CustomTransformers,\n  emitFlags?: api.EmitFlags\n}): PerformCompilationResult {\n  let program: api.Program|undefined;\n  let emitResult: ts.EmitResult|undefined;\n  let allDiagnostics: Array<ts.Diagnostic|api.Diagnostic> = [];\n  try {\n    if (!host) {\n      host = ng.createCompilerHost({options});\n    }\n\n    program = ng.createProgram({rootNames, host, options, oldProgram});\n\n    const beforeDiags = Date.now();\n    allDiagnostics.push(...gatherDiagnostics(program !));\n    if (options.diagnostics) {\n      const afterDiags = Date.now();\n      allDiagnostics.push(\n          createMessageDiagnostic(`Time for diagnostics: ${afterDiags - beforeDiags}ms.`));\n    }\n\n    if (!hasErrors(allDiagnostics)) {\n      emitResult =\n          program !.emit({emitCallback, mergeEmitResultsCallback, customTransformers, emitFlags});\n      allDiagnostics.push(...emitResult.diagnostics);\n      return {diagnostics: allDiagnostics, program, emitResult};\n    }\n    return {diagnostics: allDiagnostics, program};\n  } catch (e) {\n    let errMsg: string;\n    let code: number;\n    if (isSyntaxError(e)) {\n      // don't report the stack for syntax errors as they are well known errors.\n      errMsg = e.message;\n      code = api.DEFAULT_ERROR_CODE;\n    } else {\n      errMsg = e.stack;\n      // It is not a syntax error we might have a program with unknown state, discard it.\n      program = undefined;\n      code = api.UNKNOWN_ERROR_CODE;\n    }\n    allDiagnostics.push(\n        {category: ts.DiagnosticCategory.Error, messageText: errMsg, code, source: api.SOURCE});\n    return {diagnostics: allDiagnostics, program};\n  }\n}\nfunction defaultGatherDiagnostics(program: api.Program): Diagnostics {\n  const allDiagnostics: Array<ts.Diagnostic|api.Diagnostic> = [];\n\n  function checkDiagnostics(diags: Diagnostics | undefined) {\n    if (diags) {\n      allDiagnostics.push(...diags);\n      return !hasErrors(diags);\n    }\n    return true;\n  }\n\n  let checkOtherDiagnostics = true;\n  // Check parameter diagnostics\n  checkOtherDiagnostics = checkOtherDiagnostics &&\n      checkDiagnostics([...program.getTsOptionDiagnostics(), ...program.getNgOptionDiagnostics()]);\n\n  // Check syntactic diagnostics\n  checkOtherDiagnostics =\n      checkOtherDiagnostics && checkDiagnostics(program.getTsSyntacticDiagnostics() as Diagnostics);\n\n  // Check TypeScript semantic and Angular structure diagnostics\n  checkOtherDiagnostics =\n      checkOtherDiagnostics &&\n      checkDiagnostics(\n          [...program.getTsSemanticDiagnostics(), ...program.getNgStructuralDiagnostics()]);\n\n  // Check Angular semantic diagnostics\n  checkOtherDiagnostics =\n      checkOtherDiagnostics && checkDiagnostics(program.getNgSemanticDiagnostics() as Diagnostics);\n\n  return allDiagnostics;\n}\n\nfunction hasErrors(diags: Diagnostics) {\n  return diags.some(d => d.category === ts.DiagnosticCategory.Error);\n}\n"]}