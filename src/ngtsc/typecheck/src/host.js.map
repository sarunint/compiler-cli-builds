{"version":3,"file":"host.js","sourceRoot":"","sources":["../../../../../../../packages/compiler-cli/src/ngtsc/typecheck/src/host.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\nimport {TypeCheckContext} from './context';\n\n/**\n * A `ts.CompilerHost` which augments source files with type checking code from a\n * `TypeCheckContext`.\n */\nexport class TypeCheckProgramHost implements ts.CompilerHost {\n  /**\n   * Map of source file names to `ts.SourceFile` instances.\n   *\n   * This is prepopulated with all the old source files, and updated as files are augmented.\n   */\n  private sfCache = new Map<string, ts.SourceFile>();\n\n  /**\n   * Tracks those files in `sfCache` which have been augmented with type checking information\n   * already.\n   */\n  private augmentedSourceFiles = new Set<ts.SourceFile>();\n\n  constructor(\n      program: ts.Program, private delegate: ts.CompilerHost, private context: TypeCheckContext) {\n    // The `TypeCheckContext` uses object identity for `ts.SourceFile`s to track which files need\n    // type checking code inserted. Additionally, the operation of getting a source file should be\n    // as efficient as possible. To support both of these requirements, all of the program's\n    // source files are loaded into the cache up front.\n    program.getSourceFiles().forEach(file => { this.sfCache.set(file.fileName, file); });\n  }\n\n  getSourceFile(\n      fileName: string, languageVersion: ts.ScriptTarget,\n      onError?: ((message: string) => void)|undefined,\n      shouldCreateNewSourceFile?: boolean|undefined): ts.SourceFile|undefined {\n    // Look in the cache for the source file.\n    let sf: ts.SourceFile|undefined = this.sfCache.get(fileName);\n    if (sf === undefined) {\n      // There should be no cache misses, but just in case, delegate getSourceFile in the event of\n      // a cache miss.\n      sf = this.delegate.getSourceFile(\n          fileName, languageVersion, onError, shouldCreateNewSourceFile);\n      sf && this.sfCache.set(fileName, sf);\n    }\n    if (sf !== undefined) {\n      // Maybe augment the file with type checking code via the `TypeCheckContext`.\n      if (!this.augmentedSourceFiles.has(sf)) {\n        sf = this.context.transform(sf);\n        this.sfCache.set(fileName, sf);\n        this.augmentedSourceFiles.add(sf);\n      }\n      return sf;\n    } else {\n      return undefined;\n    }\n  }\n\n  // The rest of the methods simply delegate to the underlying `ts.CompilerHost`.\n\n  getDefaultLibFileName(options: ts.CompilerOptions): string {\n    return this.delegate.getDefaultLibFileName(options);\n  }\n\n  writeFile(\n      fileName: string, data: string, writeByteOrderMark: boolean,\n      onError: ((message: string) => void)|undefined,\n      sourceFiles: ReadonlyArray<ts.SourceFile>): void {\n    return this.delegate.writeFile(fileName, data, writeByteOrderMark, onError, sourceFiles);\n  }\n\n  getCurrentDirectory(): string { return this.delegate.getCurrentDirectory(); }\n\n  getDirectories(path: string): string[] { return this.delegate.getDirectories(path); }\n\n  getCanonicalFileName(fileName: string): string {\n    return this.delegate.getCanonicalFileName(fileName);\n  }\n\n  useCaseSensitiveFileNames(): boolean { return this.delegate.useCaseSensitiveFileNames(); }\n\n  getNewLine(): string { return this.delegate.getNewLine(); }\n\n  fileExists(fileName: string): boolean { return this.delegate.fileExists(fileName); }\n\n  readFile(fileName: string): string|undefined { return this.delegate.readFile(fileName); }\n}"]}