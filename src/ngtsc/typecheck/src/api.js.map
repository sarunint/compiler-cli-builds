{"version":3,"file":"api.js","sourceRoot":"","sources":["../../../../../../../packages/compiler-cli/src/ngtsc/typecheck/src/api.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BoundTarget, DirectiveMeta} from '@angular/compiler';\nimport * as ts from 'typescript';\n\nimport {Reference} from '../../metadata';\n\n/**\n * Extension of `DirectiveMeta` that includes additional information required to type-check the\n * usage of a particular directive.\n */\nexport interface TypeCheckableDirectiveMeta extends DirectiveMeta {\n  ref: Reference<ts.ClassDeclaration>;\n  queries: string[];\n  ngTemplateGuards: string[];\n  hasNgTemplateContextGuard: boolean;\n}\n\n/**\n * Metadata required in addition to a component class in order to generate a type check block (TCB)\n * for that component.\n */\nexport interface TypeCheckBlockMetadata {\n  /**\n   * Semantic information about the template of the component.\n   */\n  boundTarget: BoundTarget<TypeCheckableDirectiveMeta>;\n\n  /**\n   * The name of the requested type check block function.\n   */\n  fnName: string;\n}\n\nexport interface TypeCtorMetadata {\n  /**\n   * The name of the requested type constructor function.\n   */\n  fnName: string;\n\n  /**\n   * Whether to generate a body for the function or not.\n   */\n  body: boolean;\n\n  /**\n   * Input, output, and query field names in the type which should be included as constructor input.\n   */\n  fields: {inputs: string[]; outputs: string[]; queries: string[];};\n}\n"]}