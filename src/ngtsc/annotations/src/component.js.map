{"version":3,"file":"component.js","sourceRoot":"","sources":["../../../../../../../packages/compiler-cli/src/ngtsc/annotations/src/component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ConstantPool, CssSelector, Expression, R3ComponentMetadata, R3DirectiveMetadata, SelectorMatcher, Statement, TmplAstNode, WrappedNodeExpr, compileComponentFromMetadata, makeBindingParser, parseTemplate} from '@angular/compiler';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {ErrorCode, FatalDiagnosticError} from '../../diagnostics';\nimport {Decorator, ReflectionHost} from '../../host';\nimport {AbsoluteReference, Reference, ResolvedReference, filterToMembersWithDecorator, reflectObjectLiteral, staticallyResolve} from '../../metadata';\nimport {AnalysisOutput, CompileResult, DecoratorHandler} from '../../transform';\nimport {TypeCheckContext, TypeCheckableDirectiveMeta} from '../../typecheck';\n\nimport {ResourceLoader} from './api';\nimport {extractDirectiveMetadata, extractQueriesFromDecorator, parseFieldArrayValue, queriesFromFields} from './directive';\nimport {generateSetClassMetadataCall} from './metadata';\nimport {ScopeDirective, SelectorScopeRegistry} from './selector_scope';\nimport {extractDirectiveGuards, isAngularCore, unwrapExpression} from './util';\n\nconst EMPTY_MAP = new Map<string, Expression>();\n\nexport interface ComponentHandlerData {\n  meta: R3ComponentMetadata;\n  parsedTemplate: TmplAstNode[];\n  metadataStmt: Statement|null;\n}\n\n/**\n * `DecoratorHandler` which handles the `@Component` annotation.\n */\nexport class ComponentDecoratorHandler implements\n    DecoratorHandler<ComponentHandlerData, Decorator> {\n  constructor(\n      private checker: ts.TypeChecker, private reflector: ReflectionHost,\n      private scopeRegistry: SelectorScopeRegistry, private isCore: boolean,\n      private resourceLoader: ResourceLoader, private rootDirs: string[]) {}\n\n  private literalCache = new Map<Decorator, ts.ObjectLiteralExpression>();\n\n\n  detect(node: ts.Declaration, decorators: Decorator[]|null): Decorator|undefined {\n    if (!decorators) {\n      return undefined;\n    }\n    return decorators.find(\n        decorator => decorator.name === 'Component' && (this.isCore || isAngularCore(decorator)));\n  }\n\n  preanalyze(node: ts.ClassDeclaration, decorator: Decorator): Promise<void>|undefined {\n    const meta = this._resolveLiteral(decorator);\n    const component = reflectObjectLiteral(meta);\n\n    if (this.resourceLoader.preload !== undefined && component.has('templateUrl')) {\n      const templateUrlExpr = component.get('templateUrl') !;\n      const templateUrl = staticallyResolve(templateUrlExpr, this.reflector, this.checker);\n      if (typeof templateUrl !== 'string') {\n        throw new FatalDiagnosticError(\n            ErrorCode.VALUE_HAS_WRONG_TYPE, templateUrlExpr, 'templateUrl must be a string');\n      }\n      const url = path.posix.resolve(path.dirname(node.getSourceFile().fileName), templateUrl);\n      return this.resourceLoader.preload(url);\n    }\n    return undefined;\n  }\n\n  analyze(node: ts.ClassDeclaration, decorator: Decorator): AnalysisOutput<ComponentHandlerData> {\n    const meta = this._resolveLiteral(decorator);\n    this.literalCache.delete(decorator);\n\n    // @Component inherits @Directive, so begin by extracting the @Directive metadata and building\n    // on it.\n    const directiveResult =\n        extractDirectiveMetadata(node, decorator, this.checker, this.reflector, this.isCore);\n    if (directiveResult === undefined) {\n      // `extractDirectiveMetadata` returns undefined when the @Directive has `jit: true`. In this\n      // case, compilation of the decorator is skipped. Returning an empty object signifies\n      // that no analysis was produced.\n      return {};\n    }\n\n    // Next, read the `@Component`-specific fields.\n    const {decoratedElements, decorator: component, metadata} = directiveResult;\n\n    let templateStr: string|null = null;\n    if (component.has('templateUrl')) {\n      const templateUrlExpr = component.get('templateUrl') !;\n      const templateUrl = staticallyResolve(templateUrlExpr, this.reflector, this.checker);\n      if (typeof templateUrl !== 'string') {\n        throw new FatalDiagnosticError(\n            ErrorCode.VALUE_HAS_WRONG_TYPE, templateUrlExpr, 'templateUrl must be a string');\n      }\n      const url = path.posix.resolve(path.dirname(node.getSourceFile().fileName), templateUrl);\n      templateStr = this.resourceLoader.load(url);\n    } else if (component.has('template')) {\n      const templateExpr = component.get('template') !;\n      const resolvedTemplate = staticallyResolve(templateExpr, this.reflector, this.checker);\n      if (typeof resolvedTemplate !== 'string') {\n        throw new FatalDiagnosticError(\n            ErrorCode.VALUE_HAS_WRONG_TYPE, templateExpr, 'template must be a string');\n      }\n      templateStr = resolvedTemplate;\n    } else {\n      throw new FatalDiagnosticError(\n          ErrorCode.COMPONENT_MISSING_TEMPLATE, decorator.node, 'component is missing a template');\n    }\n\n    let preserveWhitespaces: boolean = false;\n    if (component.has('preserveWhitespaces')) {\n      const expr = component.get('preserveWhitespaces') !;\n      const value = staticallyResolve(expr, this.reflector, this.checker);\n      if (typeof value !== 'boolean') {\n        throw new FatalDiagnosticError(\n            ErrorCode.VALUE_HAS_WRONG_TYPE, expr, 'preserveWhitespaces must be a boolean');\n      }\n      preserveWhitespaces = value;\n    }\n\n    const viewProviders: Expression|null = component.has('viewProviders') ?\n        new WrappedNodeExpr(component.get('viewProviders') !) :\n        null;\n\n    // Go through the root directories for this project, and select the one with the smallest\n    // relative path representation.\n    const filePath = node.getSourceFile().fileName;\n    const relativeFilePath = this.rootDirs.reduce<string|undefined>((previous, rootDir) => {\n      const candidate = path.posix.relative(rootDir, filePath);\n      if (previous === undefined || candidate.length < previous.length) {\n        return candidate;\n      } else {\n        return previous;\n      }\n    }, undefined) !;\n\n    const template = parseTemplate(\n        templateStr, `${node.getSourceFile().fileName}#${node.name!.text}/template.html`,\n        {preserveWhitespaces}, relativeFilePath);\n    if (template.errors !== undefined) {\n      throw new Error(\n          `Errors parsing template: ${template.errors.map(e => e.toString()).join(', ')}`);\n    }\n\n    // If the component has a selector, it should be registered with the `SelectorScopeRegistry` so\n    // when this component appears in an `@NgModule` scope, its selector can be determined.\n    if (metadata.selector !== null) {\n      const ref = new ResolvedReference(node, node.name !);\n      this.scopeRegistry.registerDirective(node, {\n        ref,\n        name: node.name !.text,\n        directive: ref,\n        selector: metadata.selector,\n        exportAs: metadata.exportAs,\n        inputs: metadata.inputs,\n        outputs: metadata.outputs,\n        queries: metadata.queries.map(query => query.propertyName),\n        isComponent: true, ...extractDirectiveGuards(node, this.reflector),\n      });\n    }\n\n    // Construct the list of view queries.\n    const coreModule = this.isCore ? undefined : '@angular/core';\n    const viewChildFromFields = queriesFromFields(\n        filterToMembersWithDecorator(decoratedElements, 'ViewChild', coreModule), this.reflector,\n        this.checker);\n    const viewChildrenFromFields = queriesFromFields(\n        filterToMembersWithDecorator(decoratedElements, 'ViewChildren', coreModule), this.reflector,\n        this.checker);\n    const viewQueries = [...viewChildFromFields, ...viewChildrenFromFields];\n\n    if (component.has('queries')) {\n      const queriesFromDecorator = extractQueriesFromDecorator(\n          component.get('queries') !, this.reflector, this.checker, this.isCore);\n      viewQueries.push(...queriesFromDecorator.view);\n    }\n\n    let styles: string[]|null = null;\n    if (component.has('styles')) {\n      styles = parseFieldArrayValue(component, 'styles', this.reflector, this.checker);\n    }\n\n    let encapsulation: number = 0;\n    if (component.has('encapsulation')) {\n      encapsulation = parseInt(staticallyResolve(\n          component.get('encapsulation') !, this.reflector, this.checker) as string);\n    }\n\n    let animations: Expression|null = null;\n    if (component.has('animations')) {\n      animations = new WrappedNodeExpr(component.get('animations') !);\n    }\n\n    return {\n      analysis: {\n        meta: {\n          ...metadata,\n          template,\n          viewQueries,\n          encapsulation,\n          styles: styles || [],\n\n          // These will be replaced during the compilation step, after all `NgModule`s have been\n          // analyzed and the full compilation scope for the component can be realized.\n          pipes: EMPTY_MAP,\n          directives: EMPTY_MAP,\n          wrapDirectivesAndPipesInClosure: false,  //\n          animations,\n          viewProviders\n        },\n        metadataStmt: generateSetClassMetadataCall(node, this.reflector, this.isCore),\n        parsedTemplate: template.nodes,\n      },\n      typeCheck: true,\n    };\n  }\n\n  typeCheck(ctx: TypeCheckContext, node: ts.Declaration, meta: ComponentHandlerData): void {\n    const scope = this.scopeRegistry.lookupCompilationScopeAsRefs(node);\n    const matcher = new SelectorMatcher<ScopeDirective<any>>();\n    if (scope !== null) {\n      scope.directives.forEach(\n          (meta, selector) => { matcher.addSelectables(CssSelector.parse(selector), meta); });\n      ctx.addTemplate(node as ts.ClassDeclaration, meta.parsedTemplate, matcher);\n    }\n  }\n\n  compile(node: ts.ClassDeclaration, analysis: ComponentHandlerData, pool: ConstantPool):\n      CompileResult {\n    // Check whether this component was registered with an NgModule. If so, it should be compiled\n    // under that module's compilation scope.\n    const scope = this.scopeRegistry.lookupCompilationScope(node);\n    let metadata = analysis.meta;\n    if (scope !== null) {\n      // Replace the empty components and directives from the analyze() step with a fully expanded\n      // scope. This is possible now because during compile() the whole compilation unit has been\n      // fully analyzed.\n      const {pipes, containsForwardDecls} = scope;\n      const directives = new Map<string, Expression>();\n      scope.directives.forEach((meta, selector) => directives.set(selector, meta.directive));\n      const wrapDirectivesAndPipesInClosure: boolean = !!containsForwardDecls;\n      metadata = {...metadata, directives, pipes, wrapDirectivesAndPipesInClosure};\n    }\n\n    const res = compileComponentFromMetadata(metadata, pool, makeBindingParser());\n\n    const statements = res.statements;\n    if (analysis.metadataStmt !== null) {\n      statements.push(analysis.metadataStmt);\n    }\n    return {\n      name: 'ngComponentDef',\n      initializer: res.expression, statements,\n      type: res.type,\n    };\n  }\n\n  private _resolveLiteral(decorator: Decorator): ts.ObjectLiteralExpression {\n    if (this.literalCache.has(decorator)) {\n      return this.literalCache.get(decorator) !;\n    }\n    if (decorator.args === null || decorator.args.length !== 1) {\n      throw new FatalDiagnosticError(\n          ErrorCode.DECORATOR_ARITY_WRONG, decorator.node,\n          `Incorrect number of arguments to @Component decorator`);\n    }\n    const meta = unwrapExpression(decorator.args[0]);\n\n    if (!ts.isObjectLiteralExpression(meta)) {\n      throw new FatalDiagnosticError(\n          ErrorCode.DECORATOR_ARG_NOT_LITERAL, meta, `Decorator argument must be literal.`);\n    }\n\n    this.literalCache.set(decorator, meta);\n    return meta;\n  }\n}\n"]}