{"version":3,"file":"selector_scope.js","sourceRoot":"","sources":["../../../../../../../packages/compiler-cli/src/ngtsc/annotations/src/selector_scope.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Expression, ExternalExpr, ExternalReference, WrappedNodeExpr} from '@angular/compiler';\nimport * as ts from 'typescript';\n\nimport {ReflectionHost} from '../../host';\nimport {AbsoluteReference, Reference, ResolvedReference, reflectTypeEntityToDeclaration} from '../../metadata';\nimport {reflectIdentifierOfDeclaration, reflectNameOfDeclaration} from '../../metadata/src/reflector';\nimport {TypeCheckableDirectiveMeta} from '../../typecheck';\n\nimport {extractDirectiveGuards} from './util';\n\n\n/**\n * Metadata extracted for a given NgModule that can be used to compute selector scopes.\n */\nexport interface ModuleData {\n  declarations: Reference<ts.Declaration>[];\n  imports: Reference<ts.Declaration>[];\n  exports: Reference<ts.Declaration>[];\n}\n\n/**\n * Transitively expanded maps of directives and pipes visible to a component being compiled in the\n * context of some module.\n */\nexport interface CompilationScope<T> {\n  directives: Map<string, ScopeDirective<T>>;\n  pipes: Map<string, T>;\n  containsForwardDecls?: boolean;\n}\n\nexport interface ScopeDirective<T> extends TypeCheckableDirectiveMeta {\n  selector: string;\n  directive: T;\n}\n\n/**\n * Both transitively expanded scopes for a given NgModule.\n */\ninterface SelectorScopes {\n  /**\n   * Set of components, directives, and pipes visible to all components being compiled in the\n   * context of some module.\n   */\n  compilation: Reference<ts.Declaration>[];\n\n  /**\n   * Set of components, directives, and pipes added to the compilation scope of any module importing\n   * some module.\n   */\n  exported: Reference<ts.Declaration>[];\n}\n\n/**\n * Registry which records and correlates static analysis information of Angular types.\n *\n * Once a compilation unit's information is fed into the SelectorScopeRegistry, it can be asked to\n * produce transitive `CompilationScope`s for components.\n */\nexport class SelectorScopeRegistry {\n  /**\n   *  Map of modules declared in the current compilation unit to their (local) metadata.\n   */\n  private _moduleToData = new Map<ts.Declaration, ModuleData>();\n\n  /**\n   * Map of modules to their cached `CompilationScope`s.\n   */\n  private _compilationScopeCache = new Map<ts.Declaration, CompilationScope<Reference>>();\n\n  /**\n   * Map of components/directives to their metadata.\n   */\n  private _directiveToMetadata = new Map<ts.Declaration, ScopeDirective<Reference>>();\n\n  /**\n   * Map of pipes to their name.\n   */\n  private _pipeToName = new Map<ts.Declaration, string>();\n\n  /**\n   * Map of components/directives/pipes to their module.\n   */\n  private _declararedTypeToModule = new Map<ts.Declaration, ts.Declaration>();\n\n  constructor(private checker: ts.TypeChecker, private reflector: ReflectionHost) {}\n\n  /**\n   * Register a module's metadata with the registry.\n   */\n  registerModule(node: ts.Declaration, data: ModuleData): void {\n    node = ts.getOriginalNode(node) as ts.Declaration;\n\n    if (this._moduleToData.has(node)) {\n      throw new Error(`Module already registered: ${reflectNameOfDeclaration(node)}`);\n    }\n    this._moduleToData.set(node, data);\n\n    // Register all of the module's declarations in the context map as belonging to this module.\n    data.declarations.forEach(decl => {\n      this._declararedTypeToModule.set(ts.getOriginalNode(decl.node) as ts.Declaration, node);\n    });\n  }\n\n  /**\n   * Register the metadata of a component or directive with the registry.\n   */\n  registerDirective(node: ts.Declaration, metadata: ScopeDirective<Reference>): void {\n    node = ts.getOriginalNode(node) as ts.Declaration;\n\n    if (this._directiveToMetadata.has(node)) {\n      throw new Error(\n          `Selector already registered: ${reflectNameOfDeclaration(node)} ${metadata.selector}`);\n    }\n    this._directiveToMetadata.set(node, metadata);\n  }\n\n  /**\n   * Register the name of a pipe with the registry.\n   */\n  registerPipe(node: ts.Declaration, name: string): void {\n    node = ts.getOriginalNode(node) as ts.Declaration;\n\n    this._pipeToName.set(node, name);\n  }\n\n  lookupCompilationScopeAsRefs(node: ts.Declaration): CompilationScope<Reference>|null {\n    node = ts.getOriginalNode(node) as ts.Declaration;\n\n    // If the component has no associated module, then it has no compilation scope.\n    if (!this._declararedTypeToModule.has(node)) {\n      return null;\n    }\n\n    const module = this._declararedTypeToModule.get(node) !;\n\n    // Compilation scope computation is somewhat expensive, so it's cached. Check the cache for\n    // the module.\n    if (this._compilationScopeCache.has(module)) {\n      // The compilation scope was cached.\n      const scope = this._compilationScopeCache.get(module) !;\n\n      // The scope as cached is in terms of References, not Expressions. Converting between them\n      // requires knowledge of the context file (in this case, the component node's source file).\n      return scope;\n    }\n\n    // This is the first time the scope for this module is being computed.\n    const directives = new Map<string, ScopeDirective<Reference<ts.Declaration>>>();\n    const pipes = new Map<string, Reference>();\n\n    // Process the declaration scope of the module, and lookup the selector of every declared type.\n    // The initial value of ngModuleImportedFrom is 'null' which signifies that the NgModule\n    // was not imported from a .d.ts source.\n    this.lookupScopesOrDie(module !, /* ngModuleImportedFrom */ null).compilation.forEach(ref => {\n      const node = ts.getOriginalNode(ref.node) as ts.Declaration;\n\n      // Either the node represents a directive or a pipe. Look for both.\n      const metadata = this.lookupDirectiveMetadata(ref);\n      // Only directives/components with selectors get added to the scope.\n      if (metadata != null) {\n        directives.set(metadata.selector, {...metadata, directive: ref});\n        return;\n      }\n\n      const name = this.lookupPipeName(node);\n      if (name != null) {\n        pipes.set(name, ref);\n      }\n    });\n\n    const scope: CompilationScope<Reference> = {directives, pipes};\n\n    // Many components may be compiled in the same scope, so cache it.\n    this._compilationScopeCache.set(node, scope);\n\n    // Convert References to Expressions in the context of the component's source file.\n    return scope;\n  }\n\n  /**\n   * Produce the compilation scope of a component, which is determined by the module that declares\n   * it.\n   */\n  lookupCompilationScope(node: ts.Declaration): CompilationScope<Expression>|null {\n    const scope = this.lookupCompilationScopeAsRefs(node);\n    return scope !== null ? convertScopeToExpressions(scope, node) : null;\n  }\n\n  private lookupScopesOrDie(node: ts.Declaration, ngModuleImportedFrom: string|null):\n      SelectorScopes {\n    const result = this.lookupScopes(node, ngModuleImportedFrom);\n    if (result === null) {\n      throw new Error(`Module not found: ${reflectNameOfDeclaration(node)}`);\n    }\n    return result;\n  }\n\n  /**\n   * Lookup `SelectorScopes` for a given module.\n   *\n   * This function assumes that if the given module was imported from an absolute path\n   * (`ngModuleImportedFrom`) then all of its declarations are exported at that same path, as well\n   * as imports and exports from other modules that are relatively imported.\n   */\n  private lookupScopes(node: ts.Declaration, ngModuleImportedFrom: string|null): SelectorScopes\n      |null {\n    let data: ModuleData|null = null;\n\n    // Either this module was analyzed directly, or has a precompiled ngModuleDef.\n    if (this._moduleToData.has(node)) {\n      // The module was analyzed before, and thus its data is available.\n      data = this._moduleToData.get(node) !;\n    } else {\n      // The module wasn't analyzed before, and probably has a precompiled ngModuleDef with a type\n      // annotation that specifies the needed metadata.\n      data = this._readModuleDataFromCompiledClass(node, ngModuleImportedFrom);\n      // Note that data here could still be null, if the class didn't have a precompiled\n      // ngModuleDef.\n    }\n\n    if (data === null) {\n      return null;\n    }\n\n    return {\n      compilation: [\n        ...data.declarations,\n        // Expand imports to the exported scope of those imports.\n        ...flatten(data.imports.map(\n            ref => this.lookupScopesOrDie(ref.node as ts.Declaration, absoluteModuleName(ref))\n                       .exported)),\n        // And include the compilation scope of exported modules.\n        ...flatten(\n            data.exports\n                .map(ref => this.lookupScopes(ref.node as ts.Declaration, absoluteModuleName(ref)))\n                .filter((scope: SelectorScopes | null): scope is SelectorScopes => scope !== null)\n                .map(scope => scope.exported))\n      ],\n      exported: flatten(data.exports.map(ref => {\n        const scope = this.lookupScopes(ref.node as ts.Declaration, absoluteModuleName(ref));\n        if (scope !== null) {\n          return scope.exported;\n        } else {\n          return [ref];\n        }\n      })),\n    };\n  }\n\n  /**\n   * Lookup the metadata of a component or directive class.\n   *\n   * Potentially this class is declared in a .d.ts file or otherwise has a manually created\n   * ngComponentDef/ngDirectiveDef. In this case, the type metadata of that definition is read\n   * to determine the metadata.\n   */\n  private lookupDirectiveMetadata(ref: Reference<ts.Declaration>): ScopeDirective<Reference>|null {\n    const node = ts.getOriginalNode(ref.node) as ts.Declaration;\n    if (this._directiveToMetadata.has(node)) {\n      return this._directiveToMetadata.get(node) !;\n    } else {\n      return this._readMetadataFromCompiledClass(ref as Reference<ts.ClassDeclaration>);\n    }\n  }\n\n  private lookupPipeName(node: ts.Declaration): string|null {\n    if (this._pipeToName.has(node)) {\n      return this._pipeToName.get(node) !;\n    } else {\n      return this._readNameFromCompiledClass(node);\n    }\n  }\n\n  /**\n   * Read the metadata from a class that has already been compiled somehow (either it's in a .d.ts\n   * file, or in a .ts file with a handwritten definition).\n   *\n   * @param clazz the class of interest\n   * @param ngModuleImportedFrom module specifier of the import path to assume for all declarations\n   * stemming from this module.\n   */\n  private _readModuleDataFromCompiledClass(\n      clazz: ts.Declaration, ngModuleImportedFrom: string|null): ModuleData|null {\n    // This operation is explicitly not memoized, as it depends on `ngModuleImportedFrom`.\n    // TODO(alxhub): investigate caching of .d.ts module metadata.\n    const ngModuleDef = this.reflector.getMembersOfClass(clazz).find(\n        member => member.name === 'ngModuleDef' && member.isStatic);\n    if (ngModuleDef === undefined) {\n      return null;\n    } else if (\n        // Validate that the shape of the ngModuleDef type is correct.\n        ngModuleDef.type === null || !ts.isTypeReferenceNode(ngModuleDef.type) ||\n        ngModuleDef.type.typeArguments === undefined ||\n        ngModuleDef.type.typeArguments.length !== 4) {\n      return null;\n    }\n\n    // Read the ModuleData out of the type arguments.\n    const [_, declarationMetadata, importMetadata, exportMetadata] = ngModuleDef.type.typeArguments;\n    return {\n      declarations: this._extractReferencesFromType(declarationMetadata, ngModuleImportedFrom),\n      exports: this._extractReferencesFromType(exportMetadata, ngModuleImportedFrom),\n      imports: this._extractReferencesFromType(importMetadata, ngModuleImportedFrom),\n    };\n  }\n\n  /**\n   * Get the selector from type metadata for a class with a precompiled ngComponentDef or\n   * ngDirectiveDef.\n   */\n  private _readMetadataFromCompiledClass(ref: Reference<ts.ClassDeclaration>):\n      ScopeDirective<Reference>|null {\n    const clazz = ts.getOriginalNode(ref.node) as ts.ClassDeclaration;\n    const def = this.reflector.getMembersOfClass(clazz).find(\n        field =>\n            field.isStatic && (field.name === 'ngComponentDef' || field.name === 'ngDirectiveDef'));\n    if (def === undefined) {\n      // No definition could be found.\n      return null;\n    } else if (\n        def.type === null || !ts.isTypeReferenceNode(def.type) ||\n        def.type.typeArguments === undefined || def.type.typeArguments.length < 2) {\n      // The type metadata was the wrong shape.\n      return null;\n    }\n    const selector = readStringType(def.type.typeArguments[1]);\n    if (selector === null) {\n      return null;\n    }\n\n    return {\n      ref,\n      name: clazz.name !.text,\n      directive: ref,\n      isComponent: def.name === 'ngComponentDef', selector,\n      exportAs: readStringType(def.type.typeArguments[2]),\n      inputs: readStringMapType(def.type.typeArguments[3]),\n      outputs: readStringMapType(def.type.typeArguments[4]),\n      queries: readStringArrayType(def.type.typeArguments[5]),\n      ...extractDirectiveGuards(clazz, this.reflector),\n    };\n  }\n\n  /**\n   * Get the selector from type metadata for a class with a precompiled ngComponentDef or\n   * ngDirectiveDef.\n   */\n  private _readNameFromCompiledClass(clazz: ts.Declaration): string|null {\n    const def = this.reflector.getMembersOfClass(clazz).find(\n        field => field.isStatic && field.name === 'ngPipeDef');\n    if (def === undefined) {\n      // No definition could be found.\n      return null;\n    } else if (\n        def.type === null || !ts.isTypeReferenceNode(def.type) ||\n        def.type.typeArguments === undefined || def.type.typeArguments.length < 2) {\n      // The type metadata was the wrong shape.\n      return null;\n    }\n    const type = def.type.typeArguments[1];\n    if (!ts.isLiteralTypeNode(type) || !ts.isStringLiteral(type.literal)) {\n      // The type metadata was the wrong type.\n      return null;\n    }\n    return type.literal.text;\n  }\n\n  /**\n   * Process a `TypeNode` which is a tuple of references to other types, and return `Reference`s to\n   * them.\n   *\n   * This operation assumes that these types should be imported from `ngModuleImportedFrom` unless\n   * they themselves were imported from another absolute path.\n   */\n  private _extractReferencesFromType(def: ts.TypeNode, ngModuleImportedFrom: string|null):\n      Reference<ts.Declaration>[] {\n    if (!ts.isTupleTypeNode(def)) {\n      return [];\n    }\n    return def.elementTypes.map(element => {\n      if (!ts.isTypeQueryNode(element)) {\n        throw new Error(`Expected TypeQueryNode`);\n      }\n      const type = element.exprName;\n      if (ngModuleImportedFrom !== null) {\n        const {node, from} = reflectTypeEntityToDeclaration(type, this.checker);\n        const moduleName = (from !== null && !from.startsWith('.') ? from : ngModuleImportedFrom);\n        const id = reflectIdentifierOfDeclaration(node);\n        return new AbsoluteReference(node, id !, moduleName, id !.text);\n      } else {\n        const {node} = reflectTypeEntityToDeclaration(type, this.checker);\n        const id = reflectIdentifierOfDeclaration(node);\n        return new ResolvedReference(node, id !);\n      }\n    });\n  }\n}\n\nfunction flatten<T>(array: T[][]): T[] {\n  return array.reduce((accum, subArray) => {\n    accum.push(...subArray);\n    return accum;\n  }, [] as T[]);\n}\n\nfunction absoluteModuleName(ref: Reference): string|null {\n  if (!(ref instanceof AbsoluteReference)) {\n    return null;\n  }\n  return ref.moduleName;\n}\n\nfunction convertDirectiveReferenceMap(\n    map: Map<string, ScopeDirective<Reference>>,\n    context: ts.SourceFile): Map<string, ScopeDirective<Expression>> {\n  const newMap = new Map<string, ScopeDirective<Expression>>();\n  map.forEach((meta, selector) => {\n    const directive = meta.directive.toExpression(context);\n    if (directive === null) {\n      throw new Error(`Could not write expression to reference ${meta.directive.node}`);\n    }\n    newMap.set(selector, {...meta, directive});\n  });\n  return newMap;\n}\n\nfunction convertPipeReferenceMap(\n    map: Map<string, Reference>, context: ts.SourceFile): Map<string, Expression> {\n  const newMap = new Map<string, Expression>();\n  map.forEach((meta, selector) => {\n    const pipe = meta.toExpression(context);\n    if (pipe === null) {\n      throw new Error(`Could not write expression to reference ${meta.node}`);\n    }\n    newMap.set(selector, pipe);\n  });\n  return newMap;\n}\n\nfunction convertScopeToExpressions(\n    scope: CompilationScope<Reference>, context: ts.Declaration): CompilationScope<Expression> {\n  const sourceContext = ts.getOriginalNode(context).getSourceFile();\n  const directives = convertDirectiveReferenceMap(scope.directives, sourceContext);\n  const pipes = convertPipeReferenceMap(scope.pipes, sourceContext);\n  const declPointer = maybeUnwrapNameOfDeclaration(context);\n  let containsForwardDecls = false;\n  directives.forEach(expr => {\n    containsForwardDecls = containsForwardDecls ||\n        isExpressionForwardReference(expr.directive, declPointer, sourceContext);\n  });\n  !containsForwardDecls && pipes.forEach(expr => {\n    containsForwardDecls =\n        containsForwardDecls || isExpressionForwardReference(expr, declPointer, sourceContext);\n  });\n  return {directives, pipes, containsForwardDecls};\n}\n\nfunction isExpressionForwardReference(\n    expr: Expression, context: ts.Node, contextSource: ts.SourceFile): boolean {\n  if (isWrappedTsNodeExpr(expr)) {\n    const node = ts.getOriginalNode(expr.node);\n    return node.getSourceFile() === contextSource && context.pos < node.pos;\n  }\n  return false;\n}\n\nfunction isWrappedTsNodeExpr(expr: Expression): expr is WrappedNodeExpr<ts.Node> {\n  return expr instanceof WrappedNodeExpr;\n}\n\nfunction maybeUnwrapNameOfDeclaration(decl: ts.Declaration): ts.Declaration|ts.Identifier {\n  if ((ts.isClassDeclaration(decl) || ts.isVariableDeclaration(decl)) && decl.name !== undefined &&\n      ts.isIdentifier(decl.name)) {\n    return decl.name;\n  }\n  return decl;\n}\n\nfunction readStringType(type: ts.TypeNode): string|null {\n  if (!ts.isLiteralTypeNode(type) || !ts.isStringLiteral(type.literal)) {\n    return null;\n  }\n  return type.literal.text;\n}\n\nfunction readStringMapType(type: ts.TypeNode): {[key: string]: string} {\n  if (!ts.isTypeLiteralNode(type)) {\n    return {};\n  }\n  const obj: {[key: string]: string} = {};\n  type.members.forEach(member => {\n    if (!ts.isPropertySignature(member) || member.type === undefined || member.name === undefined ||\n        !ts.isStringLiteral(member.name)) {\n      return;\n    }\n    const value = readStringType(member.type);\n    if (value === null) {\n      return null;\n    }\n    obj[member.name.text] = value;\n  });\n  return obj;\n}\n\nfunction readStringArrayType(type: ts.TypeNode): string[] {\n  if (!ts.isTupleTypeNode(type)) {\n    return [];\n  }\n  const res: string[] = [];\n  type.elementTypes.forEach(el => {\n    if (!ts.isLiteralTypeNode(el) || !ts.isStringLiteral(el.literal)) {\n      return;\n    }\n    res.push(el.literal.text);\n  });\n  return res;\n}\n"]}