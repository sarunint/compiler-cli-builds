{"version":3,"file":"resource_loader.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/ngtsc/resource_loader.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,yBAAyB;AAIzB;;GAEG;AACH,MAAa,kBAAkB;IAI7B,YAAoB,IAA+C;QAA/C,SAAI,GAAJ,IAAI,CAA2C;QAH3D,UAAK,GAAG,IAAI,GAAG,EAAkB,CAAC;QAClC,aAAQ,GAAG,IAAI,GAAG,EAAU,CAAC;IAEiC,CAAC;IAEvE,OAAO,CAAC,GAAW;QACjB,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACjD,OAAO,SAAS,CAAC;SAClB;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC9B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YAC5B,OAAO,SAAS,CAAC;SAClB;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACvB,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;gBACvB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAC1B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAED,IAAI,CAAC,GAAW;QACd,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACvB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAG,CAAC;SAC9B;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,4BAA4B,GAAG,sBAAsB,CAAC,CAAC;SACxE;QACD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QAC5B,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AApCD,gDAoCC;AAED;;GAEG;AACH,MAAa,kBAAkB;IAC7B,IAAI,CAAC,GAAW,IAAY,OAAO,EAAE,CAAC,YAAY,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;CACnE;AAFD,gDAEC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as fs from 'fs';\n\nimport {ResourceLoader} from './annotations';\n\n/**\n * `ResourceLoader` which delegates to a `CompilerHost` resource loading method.\n */\nexport class HostResourceLoader implements ResourceLoader {\n  private cache = new Map<string, string>();\n  private fetching = new Set<string>();\n\n  constructor(private host: (url: string) => string | Promise<string>) {}\n\n  preload(url: string): Promise<void>|undefined {\n    if (this.cache.has(url) || this.fetching.has(url)) {\n      return undefined;\n    }\n\n    const result = this.host(url);\n    if (typeof result === 'string') {\n      this.cache.set(url, result);\n      return undefined;\n    } else {\n      this.fetching.add(url);\n      return result.then(str => {\n        this.fetching.delete(url);\n        this.cache.set(url, str);\n      });\n    }\n  }\n\n  load(url: string): string {\n    if (this.cache.has(url)) {\n      return this.cache.get(url) !;\n    }\n\n    const result = this.host(url);\n    if (typeof result !== 'string') {\n      throw new Error(`HostResourceLoader: host(${url}) returned a Promise`);\n    }\n    this.cache.set(url, result);\n    return result;\n  }\n}\n\n/**\n * `ResourceLoader` which directly uses the filesystem to resolve resources synchronously.\n */\nexport class FileResourceLoader implements ResourceLoader {\n  load(url: string): string { return fs.readFileSync(url, 'utf8'); }\n}\n"]}