{"version":3,"file":"summary_generator.js","sourceRoot":"","sources":["../../../../../../../packages/compiler-cli/src/ngtsc/shims/src/summary_generator.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,iCAAiC;AAGjC,iCAA8C;AAE9C,MAAa,gBAAgB;IAC3B,YAA4B,GAAwB;QAAxB,QAAG,GAAH,GAAG,CAAqB;IAAG,CAAC;IAExD,mBAAmB,KAAe,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAEvE,uBAAuB,CAAC,QAAgB,IAAiB,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;IAEjG,QAAQ,CAAC,QAAuB,EAAE,WAAmB;QACnD,2FAA2F;QAC3F,gGAAgG;QAChG,6FAA6F;QAC7F,4FAA4F;QAC5F,kEAAkE;QAClE,MAAM,WAAW,GAAG,QAAQ;aACH,UAAU;YACX,2CAA2C;aAC1C,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAC;YAC9B,kDAAkD;aACjD,MAAM,CACH,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS;YACrD,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC;YAChC,wBAAwB;aACvB,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAM,CAAC,IAAI,CAAC,CAAC;QAEvD,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,gBAAgB,IAAI,wBAAwB,CAAC,CAAC;QAEvF,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YACzB,uFAAuF;YACvF,sCAAsC;YACtC,QAAQ,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;SAC9C;QACD,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,OAAO,EAAE,CAAC,gBAAgB,CACtB,WAAW,EAAE,UAAU,EAAE,QAAQ,CAAC,eAAe,EAAE,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;IACjF,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,KAA4B;QAC9C,MAAM,GAAG,GAAG,IAAI,GAAG,EAAkB,CAAC;QACtC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,6BAAsB,CAAC,UAAU,CAAC,CAAC;aACzD,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,eAAe,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;QAC9F,OAAO,IAAI,gBAAgB,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC;CACF;AA1CD,4CA0CC;AAED,SAAS,UAAU,CAAC,IAAoB;IACtC,OAAO,IAAI,CAAC,SAAS,KAAK,SAAS;QAC/B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;AAC1E,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\nimport {ShimGenerator} from './host';\nimport {isNonDeclarationTsFile} from './util';\n\nexport class SummaryGenerator implements ShimGenerator {\n  private constructor(private map: Map<string, string>) {}\n\n  getSummaryFileNames(): string[] { return Array.from(this.map.keys()); }\n\n  getOriginalSourceOfShim(fileName: string): string|null { return this.map.get(fileName) || null; }\n\n  generate(original: ts.SourceFile, genFilePath: string): ts.SourceFile {\n    // Collect a list of classes that need to have factory types emitted for them. This list is\n    // overly broad as at this point the ts.TypeChecker has not been created and so it can't be used\n    // to semantically understand which decorators are Angular decorators. It's okay to output an\n    // overly broad set of summary exports as the exports are no-ops anyway, and summaries are a\n    // compatibility layer which will be removed after Ivy is enabled.\n    const symbolNames = original\n                            .statements\n                            // Pick out top level class declarations...\n                            .filter(ts.isClassDeclaration)\n                            // which are named, exported, and have decorators.\n                            .filter(\n                                decl => isExported(decl) && decl.decorators !== undefined &&\n                                    decl.name !== undefined)\n                            // Grab the symbol name.\n                            .map(decl => decl.name !.text);\n\n    const varLines = symbolNames.map(name => `export const ${name}NgSummary: any = null;`);\n\n    if (varLines.length === 0) {\n      // In the event there are no other exports, add an empty export to ensure the generated\n      // summary file is still an ES module.\n      varLines.push(`export const Éµempty = null;`);\n    }\n    const sourceText = varLines.join('\\n');\n    return ts.createSourceFile(\n        genFilePath, sourceText, original.languageVersion, true, ts.ScriptKind.TS);\n  }\n\n  static forRootFiles(files: ReadonlyArray<string>): SummaryGenerator {\n    const map = new Map<string, string>();\n    files.filter(sourceFile => isNonDeclarationTsFile(sourceFile))\n        .forEach(sourceFile => map.set(sourceFile.replace(/\\.ts$/, '.ngsummary.ts'), sourceFile));\n    return new SummaryGenerator(map);\n  }\n}\n\nfunction isExported(decl: ts.Declaration): boolean {\n  return decl.modifiers !== undefined &&\n      decl.modifiers.some(mod => mod.kind == ts.SyntaxKind.ExportKeyword);\n}\n"]}