{"version":3,"file":"program.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/transformers/program.ts"],"names":[],"mappings":"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","sourcesContent":["\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AotCompiler, AotCompilerHost, AotCompilerOptions, EmitterVisitorContext, FormattedMessageChain, GeneratedFile, MessageBundle, NgAnalyzedFile, NgAnalyzedFileWithInjectables, NgAnalyzedModules, ParseSourceSpan, PartialModule, Position, Serializer, StaticSymbol, TypeScriptEmitter, Xliff, Xliff2, Xmb, core, createAotCompiler, getParseErrors, isFormattedError, isSyntaxError} from '@angular/compiler';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {TypeCheckHost, translateDiagnostics} from '../diagnostics/translate_diagnostics';\nimport {compareVersions} from '../diagnostics/typescript_version';\nimport {MetadataCollector, ModuleMetadata, createBundleIndexHost} from '../metadata';\nimport {NgtscProgram} from '../ngtsc/program';\n\nimport {CompilerHost, CompilerOptions, CustomTransformers, DEFAULT_ERROR_CODE, Diagnostic, DiagnosticMessageChain, EmitFlags, LazyRoute, LibrarySummary, Program, SOURCE, TsEmitArguments, TsEmitCallback, TsMergeEmitResultsCallback} from './api';\nimport {CodeGenerator, TsCompilerAotCompilerTypeCheckHostAdapter, getOriginalReferences} from './compiler_host';\nimport {InlineResourcesMetadataTransformer, getInlineResourcesTransformFactory} from './inline_resources';\nimport {LowerMetadataTransform, getExpressionLoweringTransformFactory} from './lower_expressions';\nimport {MetadataCache, MetadataTransformer} from './metadata_cache';\nimport {nocollapseHack} from './nocollapse_hack';\nimport {getAngularEmitterTransformFactory} from './node_emitter_transform';\nimport {PartialModuleMetadataTransformer} from './r3_metadata_transform';\nimport {StripDecoratorsMetadataTransformer, getDecoratorStripTransformerFactory} from './r3_strip_decorators';\nimport {getAngularClassTransformerFactory} from './r3_transform';\nimport {TscPassThroughProgram} from './tsc_pass_through';\nimport {DTS, GENERATED_FILES, StructureIsReused, TS, createMessageDiagnostic, isInRootDir, ngToTsDiagnostic, tsStructureIsReused, userError} from './util';\n\n\n/**\n * Maximum number of files that are emitable via calling ts.Program.emit\n * passing individual targetSourceFiles.\n */\nconst MAX_FILE_COUNT_FOR_SINGLE_FILE_EMIT = 20;\n\n\n/**\n * Fields to lower within metadata in render2 mode.\n */\nconst LOWER_FIELDS = ['useValue', 'useFactory', 'data', 'id', 'loadChildren'];\n\n/**\n * Fields to lower within metadata in render3 mode.\n */\nconst R3_LOWER_FIELDS = [...LOWER_FIELDS, 'providers', 'imports', 'exports'];\n\nconst R3_REIFIED_DECORATORS = [\n  'Component',\n  'Directive',\n  'Injectable',\n  'NgModule',\n  'Pipe',\n];\n\nconst emptyModules: NgAnalyzedModules = {\n  ngModules: [],\n  ngModuleByPipeOrDirective: new Map(),\n  files: []\n};\n\nconst defaultEmitCallback: TsEmitCallback =\n    ({program, targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles,\n      customTransformers}) =>\n        program.emit(\n            targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles, customTransformers);\n\n/**\n * Minimum supported TypeScript version\n * ∀ supported typescript version v, v >= MIN_TS_VERSION\n */\nconst MIN_TS_VERSION = '3.1.1';\n\n/**\n * Supremum of supported TypeScript versions\n * ∀ supported typescript version v, v < MAX_TS_VERSION\n * MAX_TS_VERSION is not considered as a supported TypeScript version\n */\nconst MAX_TS_VERSION = '3.2.0';\n\nclass AngularCompilerProgram implements Program {\n  private rootNames: string[];\n  private metadataCache: MetadataCache;\n  // Metadata cache used exclusively for the flat module index\n  // TODO(issue/24571): remove '!'.\n  private flatModuleMetadataCache !: MetadataCache;\n  private loweringMetadataTransform: LowerMetadataTransform;\n  private oldProgramLibrarySummaries: Map<string, LibrarySummary>|undefined;\n  private oldProgramEmittedGeneratedFiles: Map<string, GeneratedFile>|undefined;\n  private oldProgramEmittedSourceFiles: Map<string, ts.SourceFile>|undefined;\n  // Note: This will be cleared out as soon as we create the _tsProgram\n  private oldTsProgram: ts.Program|undefined;\n  private emittedLibrarySummaries: LibrarySummary[]|undefined;\n  private emittedGeneratedFiles: GeneratedFile[]|undefined;\n  private emittedSourceFiles: ts.SourceFile[]|undefined;\n\n  // Lazily initialized fields\n  // TODO(issue/24571): remove '!'.\n  private _compiler !: AotCompiler;\n  // TODO(issue/24571): remove '!'.\n  private _hostAdapter !: TsCompilerAotCompilerTypeCheckHostAdapter;\n  // TODO(issue/24571): remove '!'.\n  private _tsProgram !: ts.Program;\n  private _analyzedModules: NgAnalyzedModules|undefined;\n  private _analyzedInjectables: NgAnalyzedFileWithInjectables[]|undefined;\n  private _structuralDiagnostics: Diagnostic[]|undefined;\n  private _programWithStubs: ts.Program|undefined;\n  private _optionsDiagnostics: Diagnostic[] = [];\n  // TODO(issue/24571): remove '!'.\n  private _reifiedDecorators !: Set<StaticSymbol>;\n\n  constructor(\n      rootNames: ReadonlyArray<string>, private options: CompilerOptions,\n      private host: CompilerHost, oldProgram?: Program) {\n    this.rootNames = [...rootNames];\n\n    checkVersion(ts.version, MIN_TS_VERSION, MAX_TS_VERSION, options.disableTypeScriptVersionCheck);\n\n    this.oldTsProgram = oldProgram ? oldProgram.getTsProgram() : undefined;\n    if (oldProgram) {\n      this.oldProgramLibrarySummaries = oldProgram.getLibrarySummaries();\n      this.oldProgramEmittedGeneratedFiles = oldProgram.getEmittedGeneratedFiles();\n      this.oldProgramEmittedSourceFiles = oldProgram.getEmittedSourceFiles();\n    }\n\n    if (options.flatModuleOutFile) {\n      const {host: bundleHost, indexName, errors} =\n          createBundleIndexHost(options, this.rootNames, host, () => this.flatModuleMetadataCache);\n      if (errors) {\n        this._optionsDiagnostics.push(...errors.map(e => ({\n                                                      category: e.category,\n                                                      messageText: e.messageText as string,\n                                                      source: SOURCE,\n                                                      code: DEFAULT_ERROR_CODE\n                                                    })));\n      } else {\n        this.rootNames.push(indexName !);\n        this.host = bundleHost;\n      }\n    }\n\n    this.loweringMetadataTransform =\n        new LowerMetadataTransform(options.enableIvy ? R3_LOWER_FIELDS : LOWER_FIELDS);\n    this.metadataCache = this.createMetadataCache([this.loweringMetadataTransform]);\n  }\n\n  private createMetadataCache(transformers: MetadataTransformer[]) {\n    return new MetadataCache(\n        new MetadataCollector({quotedNames: true}), !!this.options.strictMetadataEmit,\n        transformers);\n  }\n\n  getLibrarySummaries(): Map<string, LibrarySummary> {\n    const result = new Map<string, LibrarySummary>();\n    if (this.oldProgramLibrarySummaries) {\n      this.oldProgramLibrarySummaries.forEach((summary, fileName) => result.set(fileName, summary));\n    }\n    if (this.emittedLibrarySummaries) {\n      this.emittedLibrarySummaries.forEach(\n          (summary, fileName) => result.set(summary.fileName, summary));\n    }\n    return result;\n  }\n\n  getEmittedGeneratedFiles(): Map<string, GeneratedFile> {\n    const result = new Map<string, GeneratedFile>();\n    if (this.oldProgramEmittedGeneratedFiles) {\n      this.oldProgramEmittedGeneratedFiles.forEach(\n          (genFile, fileName) => result.set(fileName, genFile));\n    }\n    if (this.emittedGeneratedFiles) {\n      this.emittedGeneratedFiles.forEach((genFile) => result.set(genFile.genFileUrl, genFile));\n    }\n    return result;\n  }\n\n  getEmittedSourceFiles(): Map<string, ts.SourceFile> {\n    const result = new Map<string, ts.SourceFile>();\n    if (this.oldProgramEmittedSourceFiles) {\n      this.oldProgramEmittedSourceFiles.forEach((sf, fileName) => result.set(fileName, sf));\n    }\n    if (this.emittedSourceFiles) {\n      this.emittedSourceFiles.forEach((sf) => result.set(sf.fileName, sf));\n    }\n    return result;\n  }\n\n  getTsProgram(): ts.Program { return this.tsProgram; }\n\n  getTsOptionDiagnostics(cancellationToken?: ts.CancellationToken) {\n    return this.tsProgram.getOptionsDiagnostics(cancellationToken);\n  }\n\n  getNgOptionDiagnostics(cancellationToken?: ts.CancellationToken): ReadonlyArray<Diagnostic> {\n    return [...this._optionsDiagnostics, ...getNgOptionDiagnostics(this.options)];\n  }\n\n  getTsSyntacticDiagnostics(sourceFile?: ts.SourceFile, cancellationToken?: ts.CancellationToken):\n      ReadonlyArray<ts.Diagnostic> {\n    return this.tsProgram.getSyntacticDiagnostics(sourceFile, cancellationToken);\n  }\n\n  getNgStructuralDiagnostics(cancellationToken?: ts.CancellationToken): ReadonlyArray<Diagnostic> {\n    return this.structuralDiagnostics;\n  }\n\n  getTsSemanticDiagnostics(sourceFile?: ts.SourceFile, cancellationToken?: ts.CancellationToken):\n      ReadonlyArray<ts.Diagnostic> {\n    const sourceFiles = sourceFile ? [sourceFile] : this.tsProgram.getSourceFiles();\n    let diags: ts.Diagnostic[] = [];\n    sourceFiles.forEach(sf => {\n      if (!GENERATED_FILES.test(sf.fileName)) {\n        diags.push(...this.tsProgram.getSemanticDiagnostics(sf, cancellationToken));\n      }\n    });\n    return diags;\n  }\n\n  getNgSemanticDiagnostics(fileName?: string, cancellationToken?: ts.CancellationToken):\n      ReadonlyArray<Diagnostic> {\n    let diags: ts.Diagnostic[] = [];\n    this.tsProgram.getSourceFiles().forEach(sf => {\n      if (GENERATED_FILES.test(sf.fileName) && !sf.isDeclarationFile) {\n        diags.push(...this.tsProgram.getSemanticDiagnostics(sf, cancellationToken));\n      }\n    });\n    const {ng} = translateDiagnostics(this.hostAdapter, diags);\n    return ng;\n  }\n\n  loadNgStructureAsync(): Promise<void> {\n    if (this._analyzedModules) {\n      throw new Error('Angular structure already loaded');\n    }\n    return Promise.resolve()\n        .then(() => {\n          const {tmpProgram, sourceFiles, tsFiles, rootNames} = this._createProgramWithBasicStubs();\n          return this.compiler.loadFilesAsync(sourceFiles, tsFiles)\n              .then(({analyzedModules, analyzedInjectables}) => {\n                if (this._analyzedModules) {\n                  throw new Error('Angular structure loaded both synchronously and asynchronously');\n                }\n                this._updateProgramWithTypeCheckStubs(\n                    tmpProgram, analyzedModules, analyzedInjectables, rootNames);\n              });\n        })\n        .catch(e => this._createProgramOnError(e));\n  }\n\n  listLazyRoutes(route?: string): LazyRoute[] {\n    // Note: Don't analyzedModules if a route is given\n    // to be fast enough.\n    return this.compiler.listLazyRoutes(route, route ? undefined : this.analyzedModules);\n  }\n\n  emit(parameters: {\n    emitFlags?: EmitFlags,\n    cancellationToken?: ts.CancellationToken,\n    customTransformers?: CustomTransformers,\n    emitCallback?: TsEmitCallback,\n    mergeEmitResultsCallback?: TsMergeEmitResultsCallback,\n  } = {}): ts.EmitResult {\n    if (this.options.enableIvy === 'ngtsc' || this.options.enableIvy === 'tsc') {\n      throw new Error('Cannot run legacy compiler in ngtsc mode');\n    }\n    return this.options.enableIvy === true ? this._emitRender3(parameters) :\n                                             this._emitRender2(parameters);\n  }\n\n  private _emitRender3(\n      {\n          emitFlags = EmitFlags.Default, cancellationToken, customTransformers,\n          emitCallback = defaultEmitCallback, mergeEmitResultsCallback = mergeEmitResults,\n      }: {\n        emitFlags?: EmitFlags,\n        cancellationToken?: ts.CancellationToken,\n        customTransformers?: CustomTransformers,\n        emitCallback?: TsEmitCallback,\n        mergeEmitResultsCallback?: TsMergeEmitResultsCallback,\n      } = {}): ts.EmitResult {\n    const emitStart = Date.now();\n    if ((emitFlags & (EmitFlags.JS | EmitFlags.DTS | EmitFlags.Metadata | EmitFlags.Codegen)) ===\n        0) {\n      return {emitSkipped: true, diagnostics: [], emittedFiles: []};\n    }\n\n    // analyzedModules and analyzedInjectables are created together. If one exists, so does the\n    // other.\n    const modules =\n        this.compiler.emitAllPartialModules(this.analyzedModules, this._analyzedInjectables !);\n\n    const writeTsFile: ts.WriteFileCallback =\n        (outFileName, outData, writeByteOrderMark, onError?, sourceFiles?) => {\n          const sourceFile = sourceFiles && sourceFiles.length == 1 ? sourceFiles[0] : null;\n          let genFile: GeneratedFile|undefined;\n          if (this.options.annotateForClosureCompiler && sourceFile &&\n              TS.test(sourceFile.fileName)) {\n            outData = nocollapseHack(outData);\n          }\n          this.writeFile(outFileName, outData, writeByteOrderMark, onError, undefined, sourceFiles);\n        };\n\n    const emitOnlyDtsFiles = (emitFlags & (EmitFlags.DTS | EmitFlags.JS)) == EmitFlags.DTS;\n\n    const tsCustomTransformers = this.calculateTransforms(\n        /* genFiles */ undefined, /* partialModules */ modules,\n        /* stripDecorators */ this.reifiedDecorators, customTransformers);\n\n\n    // Restore the original references before we emit so TypeScript doesn't emit\n    // a reference to the .d.ts file.\n    const augmentedReferences = new Map<ts.SourceFile, ReadonlyArray<ts.FileReference>>();\n    for (const sourceFile of this.tsProgram.getSourceFiles()) {\n      const originalReferences = getOriginalReferences(sourceFile);\n      if (originalReferences) {\n        augmentedReferences.set(sourceFile, sourceFile.referencedFiles);\n        sourceFile.referencedFiles = originalReferences;\n      }\n    }\n\n    try {\n      return emitCallback({\n        program: this.tsProgram,\n        host: this.host,\n        options: this.options,\n        writeFile: writeTsFile, emitOnlyDtsFiles,\n        customTransformers: tsCustomTransformers\n      });\n    } finally {\n      // Restore the references back to the augmented value to ensure that the\n      // checks that TypeScript makes for project structure reuse will succeed.\n      for (const [sourceFile, references] of Array.from(augmentedReferences)) {\n        // TODO(chuckj): Remove any cast after updating build to 2.6\n        (sourceFile as any).referencedFiles = references;\n      }\n    }\n  }\n\n  private _emitRender2(\n      {\n          emitFlags = EmitFlags.Default, cancellationToken, customTransformers,\n          emitCallback = defaultEmitCallback, mergeEmitResultsCallback = mergeEmitResults,\n      }: {\n        emitFlags?: EmitFlags,\n        cancellationToken?: ts.CancellationToken,\n        customTransformers?: CustomTransformers,\n        emitCallback?: TsEmitCallback,\n        mergeEmitResultsCallback?: TsMergeEmitResultsCallback,\n      } = {}): ts.EmitResult {\n    const emitStart = Date.now();\n    if (emitFlags & EmitFlags.I18nBundle) {\n      const locale = this.options.i18nOutLocale || null;\n      const file = this.options.i18nOutFile || null;\n      const format = this.options.i18nOutFormat || null;\n      const bundle = this.compiler.emitMessageBundle(this.analyzedModules, locale);\n      i18nExtract(format, file, this.host, this.options, bundle);\n    }\n    if ((emitFlags & (EmitFlags.JS | EmitFlags.DTS | EmitFlags.Metadata | EmitFlags.Codegen)) ===\n        0) {\n      return {emitSkipped: true, diagnostics: [], emittedFiles: []};\n    }\n    let {genFiles, genDiags} = this.generateFilesForEmit(emitFlags);\n    if (genDiags.length) {\n      return {\n        diagnostics: genDiags,\n        emitSkipped: true,\n        emittedFiles: [],\n      };\n    }\n    this.emittedGeneratedFiles = genFiles;\n    const outSrcMapping: Array<{sourceFile: ts.SourceFile, outFileName: string}> = [];\n    const genFileByFileName = new Map<string, GeneratedFile>();\n    genFiles.forEach(genFile => genFileByFileName.set(genFile.genFileUrl, genFile));\n    this.emittedLibrarySummaries = [];\n    const emittedSourceFiles = [] as ts.SourceFile[];\n    const writeTsFile: ts.WriteFileCallback =\n        (outFileName, outData, writeByteOrderMark, onError?, sourceFiles?) => {\n          const sourceFile = sourceFiles && sourceFiles.length == 1 ? sourceFiles[0] : null;\n          let genFile: GeneratedFile|undefined;\n          if (sourceFile) {\n            outSrcMapping.push({outFileName: outFileName, sourceFile});\n            genFile = genFileByFileName.get(sourceFile.fileName);\n            if (!sourceFile.isDeclarationFile && !GENERATED_FILES.test(sourceFile.fileName)) {\n              // Note: sourceFile is the transformed sourcefile, not the original one!\n              const originalFile = this.tsProgram.getSourceFile(sourceFile.fileName);\n              if (originalFile) {\n                emittedSourceFiles.push(originalFile);\n              }\n            }\n            if (this.options.annotateForClosureCompiler && TS.test(sourceFile.fileName)) {\n              outData = nocollapseHack(outData);\n            }\n          }\n          this.writeFile(outFileName, outData, writeByteOrderMark, onError, genFile, sourceFiles);\n        };\n\n    const modules = this._analyzedInjectables &&\n        this.compiler.emitAllPartialModules2(this._analyzedInjectables);\n\n    const tsCustomTransformers = this.calculateTransforms(\n        genFileByFileName, modules, /* stripDecorators */ undefined, customTransformers);\n    const emitOnlyDtsFiles = (emitFlags & (EmitFlags.DTS | EmitFlags.JS)) == EmitFlags.DTS;\n    // Restore the original references before we emit so TypeScript doesn't emit\n    // a reference to the .d.ts file.\n    const augmentedReferences = new Map<ts.SourceFile, ReadonlyArray<ts.FileReference>>();\n    for (const sourceFile of this.tsProgram.getSourceFiles()) {\n      const originalReferences = getOriginalReferences(sourceFile);\n      if (originalReferences) {\n        augmentedReferences.set(sourceFile, sourceFile.referencedFiles);\n        sourceFile.referencedFiles = originalReferences;\n      }\n    }\n    const genTsFiles: GeneratedFile[] = [];\n    const genJsonFiles: GeneratedFile[] = [];\n    genFiles.forEach(gf => {\n      if (gf.stmts) {\n        genTsFiles.push(gf);\n      }\n      if (gf.source) {\n        genJsonFiles.push(gf);\n      }\n    });\n    let emitResult: ts.EmitResult;\n    let emittedUserTsCount: number;\n    try {\n      const sourceFilesToEmit = this.getSourceFilesForEmit();\n      if (sourceFilesToEmit &&\n          (sourceFilesToEmit.length + genTsFiles.length) < MAX_FILE_COUNT_FOR_SINGLE_FILE_EMIT) {\n        const fileNamesToEmit =\n            [...sourceFilesToEmit.map(sf => sf.fileName), ...genTsFiles.map(gf => gf.genFileUrl)];\n        emitResult = mergeEmitResultsCallback(\n            fileNamesToEmit.map((fileName) => emitResult = emitCallback({\n                                  program: this.tsProgram,\n                                  host: this.host,\n                                  options: this.options,\n                                  writeFile: writeTsFile, emitOnlyDtsFiles,\n                                  customTransformers: tsCustomTransformers,\n                                  targetSourceFile: this.tsProgram.getSourceFile(fileName),\n                                })));\n        emittedUserTsCount = sourceFilesToEmit.length;\n      } else {\n        emitResult = emitCallback({\n          program: this.tsProgram,\n          host: this.host,\n          options: this.options,\n          writeFile: writeTsFile, emitOnlyDtsFiles,\n          customTransformers: tsCustomTransformers\n        });\n        emittedUserTsCount = this.tsProgram.getSourceFiles().length - genTsFiles.length;\n      }\n    } finally {\n      // Restore the references back to the augmented value to ensure that the\n      // checks that TypeScript makes for project structure reuse will succeed.\n      for (const [sourceFile, references] of Array.from(augmentedReferences)) {\n        // TODO(chuckj): Remove any cast after updating build to 2.6\n        (sourceFile as any).referencedFiles = references;\n      }\n    }\n    this.emittedSourceFiles = emittedSourceFiles;\n\n    // Match behavior of tsc: only produce emit diagnostics if it would block\n    // emit. If noEmitOnError is false, the emit will happen in spite of any\n    // errors, so we should not report them.\n    if (this.options.noEmitOnError === true) {\n      // translate the diagnostics in the emitResult as well.\n      const translatedEmitDiags = translateDiagnostics(this.hostAdapter, emitResult.diagnostics);\n      emitResult.diagnostics = translatedEmitDiags.ts.concat(\n          this.structuralDiagnostics.concat(translatedEmitDiags.ng).map(ngToTsDiagnostic));\n    }\n\n    if (!outSrcMapping.length) {\n      // if no files were emitted by TypeScript, also don't emit .json files\n      emitResult.diagnostics =\n          emitResult.diagnostics.concat([createMessageDiagnostic(`Emitted no files.`)]);\n      return emitResult;\n    }\n\n    let sampleSrcFileName: string|undefined;\n    let sampleOutFileName: string|undefined;\n    if (outSrcMapping.length) {\n      sampleSrcFileName = outSrcMapping[0].sourceFile.fileName;\n      sampleOutFileName = outSrcMapping[0].outFileName;\n    }\n    const srcToOutPath =\n        createSrcToOutPathMapper(this.options.outDir, sampleSrcFileName, sampleOutFileName);\n    if (emitFlags & EmitFlags.Codegen) {\n      genJsonFiles.forEach(gf => {\n        const outFileName = srcToOutPath(gf.genFileUrl);\n        this.writeFile(outFileName, gf.source !, false, undefined, gf);\n      });\n    }\n    let metadataJsonCount = 0;\n    if (emitFlags & EmitFlags.Metadata) {\n      this.tsProgram.getSourceFiles().forEach(sf => {\n        if (!sf.isDeclarationFile && !GENERATED_FILES.test(sf.fileName)) {\n          metadataJsonCount++;\n          const metadata = this.metadataCache.getMetadata(sf);\n          if (metadata) {\n            const metadataText = JSON.stringify([metadata]);\n            const outFileName = srcToOutPath(sf.fileName.replace(/\\.tsx?$/, '.metadata.json'));\n            this.writeFile(outFileName, metadataText, false, undefined, undefined, [sf]);\n          }\n        }\n      });\n    }\n    const emitEnd = Date.now();\n    if (this.options.diagnostics) {\n      emitResult.diagnostics = emitResult.diagnostics.concat([createMessageDiagnostic([\n        `Emitted in ${emitEnd - emitStart}ms`,\n        `- ${emittedUserTsCount} user ts files`,\n        `- ${genTsFiles.length} generated ts files`,\n        `- ${genJsonFiles.length + metadataJsonCount} generated json files`,\n      ].join('\\n'))]);\n    }\n\n    return emitResult;\n  }\n\n  // Private members\n  private get compiler(): AotCompiler {\n    if (!this._compiler) {\n      this._createCompiler();\n    }\n    return this._compiler !;\n  }\n\n  private get hostAdapter(): TsCompilerAotCompilerTypeCheckHostAdapter {\n    if (!this._hostAdapter) {\n      this._createCompiler();\n    }\n    return this._hostAdapter !;\n  }\n\n  private get analyzedModules(): NgAnalyzedModules {\n    if (!this._analyzedModules) {\n      this.initSync();\n    }\n    return this._analyzedModules !;\n  }\n\n  private get structuralDiagnostics(): ReadonlyArray<Diagnostic> {\n    let diagnostics = this._structuralDiagnostics;\n    if (!diagnostics) {\n      this.initSync();\n      diagnostics = (this._structuralDiagnostics = this._structuralDiagnostics || []);\n    }\n    return diagnostics;\n  }\n\n  private get tsProgram(): ts.Program {\n    if (!this._tsProgram) {\n      this.initSync();\n    }\n    return this._tsProgram !;\n  }\n\n  private get reifiedDecorators(): Set<StaticSymbol> {\n    if (!this._reifiedDecorators) {\n      const reflector = this.compiler.reflector;\n      this._reifiedDecorators = new Set(\n          R3_REIFIED_DECORATORS.map(name => reflector.findDeclaration('@angular/core', name)));\n    }\n    return this._reifiedDecorators;\n  }\n\n  private calculateTransforms(\n      genFiles: Map<string, GeneratedFile>|undefined, partialModules: PartialModule[]|undefined,\n      stripDecorators: Set<StaticSymbol>|undefined,\n      customTransformers?: CustomTransformers): ts.CustomTransformers {\n    const beforeTs: Array<ts.TransformerFactory<ts.SourceFile>> = [];\n    const metadataTransforms: MetadataTransformer[] = [];\n    const flatModuleMetadataTransforms: MetadataTransformer[] = [];\n    if (this.options.enableResourceInlining) {\n      beforeTs.push(getInlineResourcesTransformFactory(this.tsProgram, this.hostAdapter));\n      const transformer = new InlineResourcesMetadataTransformer(this.hostAdapter);\n      metadataTransforms.push(transformer);\n      flatModuleMetadataTransforms.push(transformer);\n    }\n\n    if (!this.options.disableExpressionLowering) {\n      beforeTs.push(\n          getExpressionLoweringTransformFactory(this.loweringMetadataTransform, this.tsProgram));\n      metadataTransforms.push(this.loweringMetadataTransform);\n    }\n    if (genFiles) {\n      beforeTs.push(getAngularEmitterTransformFactory(genFiles, this.getTsProgram()));\n    }\n    if (partialModules) {\n      beforeTs.push(getAngularClassTransformerFactory(partialModules));\n\n      // If we have partial modules, the cached metadata might be incorrect as it doesn't reflect\n      // the partial module transforms.\n      const transformer = new PartialModuleMetadataTransformer(partialModules);\n      metadataTransforms.push(transformer);\n      flatModuleMetadataTransforms.push(transformer);\n    }\n\n    if (stripDecorators) {\n      beforeTs.push(getDecoratorStripTransformerFactory(\n          stripDecorators, this.compiler.reflector, this.getTsProgram().getTypeChecker()));\n      const transformer =\n          new StripDecoratorsMetadataTransformer(stripDecorators, this.compiler.reflector);\n      metadataTransforms.push(transformer);\n      flatModuleMetadataTransforms.push(transformer);\n    }\n\n    if (customTransformers && customTransformers.beforeTs) {\n      beforeTs.push(...customTransformers.beforeTs);\n    }\n    if (metadataTransforms.length > 0) {\n      this.metadataCache = this.createMetadataCache(metadataTransforms);\n    }\n    if (flatModuleMetadataTransforms.length > 0) {\n      this.flatModuleMetadataCache = this.createMetadataCache(flatModuleMetadataTransforms);\n    }\n    const afterTs = customTransformers ? customTransformers.afterTs : undefined;\n    return {before: beforeTs, after: afterTs};\n  }\n\n  private initSync() {\n    if (this._analyzedModules) {\n      return;\n    }\n    try {\n      const {tmpProgram, sourceFiles, tsFiles, rootNames} = this._createProgramWithBasicStubs();\n      const {analyzedModules, analyzedInjectables} =\n          this.compiler.loadFilesSync(sourceFiles, tsFiles);\n      this._updateProgramWithTypeCheckStubs(\n          tmpProgram, analyzedModules, analyzedInjectables, rootNames);\n    } catch (e) {\n      this._createProgramOnError(e);\n    }\n  }\n\n  private _createCompiler() {\n    const codegen: CodeGenerator = {\n      generateFile: (genFileName, baseFileName) =>\n                        this._compiler.emitBasicStub(genFileName, baseFileName),\n      findGeneratedFileNames: (fileName) => this._compiler.findGeneratedFileNames(fileName),\n    };\n\n    this._hostAdapter = new TsCompilerAotCompilerTypeCheckHostAdapter(\n        this.rootNames, this.options, this.host, this.metadataCache, codegen,\n        this.oldProgramLibrarySummaries);\n    const aotOptions = getAotCompilerOptions(this.options);\n    const errorCollector = (this.options.collectAllErrors || this.options.fullTemplateTypeCheck) ?\n        (err: any) => this._addStructuralDiagnostics(err) :\n        undefined;\n    this._compiler = createAotCompiler(this._hostAdapter, aotOptions, errorCollector).compiler;\n  }\n\n  private _createProgramWithBasicStubs(): {\n    tmpProgram: ts.Program,\n    rootNames: string[],\n    sourceFiles: string[],\n    tsFiles: string[],\n  } {\n    if (this._analyzedModules) {\n      throw new Error(`Internal Error: already initialized!`);\n    }\n    // Note: This is important to not produce a memory leak!\n    const oldTsProgram = this.oldTsProgram;\n    this.oldTsProgram = undefined;\n\n    const codegen: CodeGenerator = {\n      generateFile: (genFileName, baseFileName) =>\n                        this.compiler.emitBasicStub(genFileName, baseFileName),\n      findGeneratedFileNames: (fileName) => this.compiler.findGeneratedFileNames(fileName),\n    };\n\n\n    let rootNames = [...this.rootNames];\n    if (this.options.generateCodeForLibraries !== false) {\n      // if we should generateCodeForLibraries, never include\n      // generated files in the program as otherwise we will\n      // overwrite them and typescript will report the error\n      // TS5055: Cannot write file ... because it would overwrite input file.\n      rootNames = rootNames.filter(fn => !GENERATED_FILES.test(fn));\n    }\n    if (this.options.noResolve) {\n      this.rootNames.forEach(rootName => {\n        if (this.hostAdapter.shouldGenerateFilesFor(rootName)) {\n          rootNames.push(...this.compiler.findGeneratedFileNames(rootName));\n        }\n      });\n    }\n\n    const tmpProgram = ts.createProgram(rootNames, this.options, this.hostAdapter, oldTsProgram);\n    const sourceFiles: string[] = [];\n    const tsFiles: string[] = [];\n    tmpProgram.getSourceFiles().forEach(sf => {\n      if (this.hostAdapter.isSourceFile(sf.fileName)) {\n        sourceFiles.push(sf.fileName);\n      }\n      if (TS.test(sf.fileName) && !DTS.test(sf.fileName)) {\n        tsFiles.push(sf.fileName);\n      }\n    });\n    return {tmpProgram, sourceFiles, tsFiles, rootNames};\n  }\n\n  private _updateProgramWithTypeCheckStubs(\n      tmpProgram: ts.Program, analyzedModules: NgAnalyzedModules,\n      analyzedInjectables: NgAnalyzedFileWithInjectables[], rootNames: string[]) {\n    this._analyzedModules = analyzedModules;\n    this._analyzedInjectables = analyzedInjectables;\n    tmpProgram.getSourceFiles().forEach(sf => {\n      if (sf.fileName.endsWith('.ngfactory.ts')) {\n        const {generate, baseFileName} = this.hostAdapter.shouldGenerateFile(sf.fileName);\n        if (generate) {\n          // Note: ! is ok as hostAdapter.shouldGenerateFile will always return a baseFileName\n          // for .ngfactory.ts files.\n          const genFile = this.compiler.emitTypeCheckStub(sf.fileName, baseFileName !);\n          if (genFile) {\n            this.hostAdapter.updateGeneratedFile(genFile);\n          }\n        }\n      }\n    });\n    this._tsProgram = ts.createProgram(rootNames, this.options, this.hostAdapter, tmpProgram);\n    // Note: the new ts program should be completely reusable by TypeScript as:\n    // - we cache all the files in the hostAdapter\n    // - new new stubs use the exactly same imports/exports as the old once (we assert that in\n    // hostAdapter.updateGeneratedFile).\n    if (tsStructureIsReused(tmpProgram) !== StructureIsReused.Completely) {\n      throw new Error(`Internal Error: The structure of the program changed during codegen.`);\n    }\n  }\n\n  private _createProgramOnError(e: any) {\n    // Still fill the analyzedModules and the tsProgram\n    // so that we don't cause other errors for users who e.g. want to emit the ngProgram.\n    this._analyzedModules = emptyModules;\n    this.oldTsProgram = undefined;\n    this._hostAdapter.isSourceFile = () => false;\n    this._tsProgram = ts.createProgram(this.rootNames, this.options, this.hostAdapter);\n    if (isSyntaxError(e)) {\n      this._addStructuralDiagnostics(e);\n      return;\n    }\n    throw e;\n  }\n\n  private _addStructuralDiagnostics(error: Error) {\n    const diagnostics = this._structuralDiagnostics || (this._structuralDiagnostics = []);\n    if (isSyntaxError(error)) {\n      diagnostics.push(...syntaxErrorToDiagnostics(error));\n    } else {\n      diagnostics.push({\n        messageText: error.toString(),\n        category: ts.DiagnosticCategory.Error,\n        source: SOURCE,\n        code: DEFAULT_ERROR_CODE\n      });\n    }\n  }\n\n  // Note: this returns a ts.Diagnostic so that we\n  // can return errors in a ts.EmitResult\n  private generateFilesForEmit(emitFlags: EmitFlags):\n      {genFiles: GeneratedFile[], genDiags: ts.Diagnostic[]} {\n    try {\n      if (!(emitFlags & EmitFlags.Codegen)) {\n        return {genFiles: [], genDiags: []};\n      }\n      // TODO(tbosch): allow generating files that are not in the rootDir\n      // See https://github.com/angular/angular/issues/19337\n      let genFiles = this.compiler.emitAllImpls(this.analyzedModules)\n                         .filter(genFile => isInRootDir(genFile.genFileUrl, this.options));\n      if (this.oldProgramEmittedGeneratedFiles) {\n        const oldProgramEmittedGeneratedFiles = this.oldProgramEmittedGeneratedFiles;\n        genFiles = genFiles.filter(genFile => {\n          const oldGenFile = oldProgramEmittedGeneratedFiles.get(genFile.genFileUrl);\n          return !oldGenFile || !genFile.isEquivalent(oldGenFile);\n        });\n      }\n      return {genFiles, genDiags: []};\n    } catch (e) {\n      // TODO(tbosch): check whether we can actually have syntax errors here,\n      // as we already parsed the metadata and templates before to create the type check block.\n      if (isSyntaxError(e)) {\n        const genDiags: ts.Diagnostic[] = [{\n          file: undefined,\n          start: undefined,\n          length: undefined,\n          messageText: e.message,\n          category: ts.DiagnosticCategory.Error,\n          source: SOURCE,\n          code: DEFAULT_ERROR_CODE\n        }];\n        return {genFiles: [], genDiags};\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * Returns undefined if all files should be emitted.\n   */\n  private getSourceFilesForEmit(): ts.SourceFile[]|undefined {\n    // TODO(tbosch): if one of the files contains a `const enum`\n    // always emit all files -> return undefined!\n    let sourceFilesToEmit = this.tsProgram.getSourceFiles().filter(\n        sf => { return !sf.isDeclarationFile && !GENERATED_FILES.test(sf.fileName); });\n    if (this.oldProgramEmittedSourceFiles) {\n      sourceFilesToEmit = sourceFilesToEmit.filter(sf => {\n        const oldFile = this.oldProgramEmittedSourceFiles !.get(sf.fileName);\n        return sf !== oldFile;\n      });\n    }\n    return sourceFilesToEmit;\n  }\n\n  private writeFile(\n      outFileName: string, outData: string, writeByteOrderMark: boolean,\n      onError?: (message: string) => void, genFile?: GeneratedFile,\n      sourceFiles?: ReadonlyArray<ts.SourceFile>) {\n    // collect emittedLibrarySummaries\n    let baseFile: ts.SourceFile|undefined;\n    if (genFile) {\n      baseFile = this.tsProgram.getSourceFile(genFile.srcFileUrl);\n      if (baseFile) {\n        if (!this.emittedLibrarySummaries) {\n          this.emittedLibrarySummaries = [];\n        }\n        if (genFile.genFileUrl.endsWith('.ngsummary.json') && baseFile.fileName.endsWith('.d.ts')) {\n          this.emittedLibrarySummaries.push({\n            fileName: baseFile.fileName,\n            text: baseFile.text,\n            sourceFile: baseFile,\n          });\n          this.emittedLibrarySummaries.push({fileName: genFile.genFileUrl, text: outData});\n          if (!this.options.declaration) {\n            // If we don't emit declarations, still record an empty .ngfactory.d.ts file,\n            // as we might need it later on for resolving module names from summaries.\n            const ngFactoryDts =\n                genFile.genFileUrl.substring(0, genFile.genFileUrl.length - 15) + '.ngfactory.d.ts';\n            this.emittedLibrarySummaries.push({fileName: ngFactoryDts, text: ''});\n          }\n        } else if (outFileName.endsWith('.d.ts') && baseFile.fileName.endsWith('.d.ts')) {\n          const dtsSourceFilePath = genFile.genFileUrl.replace(/\\.ts$/, '.d.ts');\n          // Note: Don't use sourceFiles here as the created .d.ts has a path in the outDir,\n          // but we need one that is next to the .ts file\n          this.emittedLibrarySummaries.push({fileName: dtsSourceFilePath, text: outData});\n        }\n      }\n    }\n    // Filter out generated files for which we didn't generate code.\n    // This can happen as the stub calculation is not completely exact.\n    // Note: sourceFile refers to the .ngfactory.ts / .ngsummary.ts file\n    // node_emitter_transform already set the file contents to be empty,\n    //  so this code only needs to skip the file if !allowEmptyCodegenFiles.\n    const isGenerated = GENERATED_FILES.test(outFileName);\n    if (isGenerated && !this.options.allowEmptyCodegenFiles &&\n        (!genFile || !genFile.stmts || genFile.stmts.length === 0)) {\n      return;\n    }\n    if (baseFile) {\n      sourceFiles = sourceFiles ? [...sourceFiles, baseFile] : [baseFile];\n    }\n    // TODO: remove any when TS 2.4 support is removed.\n    this.host.writeFile(outFileName, outData, writeByteOrderMark, onError, sourceFiles as any);\n  }\n}\n\n/**\n * Checks whether a given version ∈ [minVersion, maxVersion[\n * An error will be thrown if the following statements are simultaneously true:\n * - the given version ∉ [minVersion, maxVersion[,\n * - the result of the version check is not meant to be bypassed (the parameter disableVersionCheck\n * is false)\n *\n * @param version The version on which the check will be performed\n * @param minVersion The lower bound version. A valid version needs to be greater than minVersion\n * @param maxVersion The upper bound version. A valid version needs to be strictly less than\n * maxVersion\n * @param disableVersionCheck Indicates whether version check should be bypassed\n *\n * @throws Will throw an error if the following statements are simultaneously true:\n * - the given version ∉ [minVersion, maxVersion[,\n * - the result of the version check is not meant to be bypassed (the parameter disableVersionCheck\n * is false)\n */\nexport function checkVersion(\n    version: string, minVersion: string, maxVersion: string,\n    disableVersionCheck: boolean | undefined) {\n  if ((compareVersions(version, minVersion) < 0 || compareVersions(version, maxVersion) >= 0) &&\n      !disableVersionCheck) {\n    throw new Error(\n        `The Angular Compiler requires TypeScript >=${minVersion} and <${maxVersion} but ${version} was found instead.`);\n  }\n}\n\nexport function createProgram({rootNames, options, host, oldProgram}: {\n  rootNames: ReadonlyArray<string>,\n  options: CompilerOptions,\n  host: CompilerHost, oldProgram?: Program\n}): Program {\n  if (options.enableIvy === 'ngtsc') {\n    return new NgtscProgram(rootNames, options, host, oldProgram);\n  } else if (options.enableIvy === 'tsc') {\n    return new TscPassThroughProgram(rootNames, options, host, oldProgram);\n  }\n  return new AngularCompilerProgram(rootNames, options, host, oldProgram);\n}\n\n// Compute the AotCompiler options\nfunction getAotCompilerOptions(options: CompilerOptions): AotCompilerOptions {\n  let missingTranslation = core.MissingTranslationStrategy.Warning;\n\n  switch (options.i18nInMissingTranslations) {\n    case 'ignore':\n      missingTranslation = core.MissingTranslationStrategy.Ignore;\n      break;\n    case 'error':\n      missingTranslation = core.MissingTranslationStrategy.Error;\n      break;\n  }\n\n  let translations: string = '';\n\n  if (options.i18nInFile) {\n    if (!options.i18nInLocale) {\n      throw new Error(`The translation file (${options.i18nInFile}) locale must be provided.`);\n    }\n    translations = fs.readFileSync(options.i18nInFile, 'utf8');\n  } else {\n    // No translations are provided, ignore any errors\n    // We still go through i18n to remove i18n attributes\n    missingTranslation = core.MissingTranslationStrategy.Ignore;\n  }\n\n  return {\n    locale: options.i18nInLocale,\n    i18nFormat: options.i18nInFormat || options.i18nOutFormat, translations, missingTranslation,\n    enableSummariesForJit: options.enableSummariesForJit,\n    preserveWhitespaces: options.preserveWhitespaces,\n    fullTemplateTypeCheck: options.fullTemplateTypeCheck,\n    allowEmptyCodegenFiles: options.allowEmptyCodegenFiles,\n    enableIvy: options.enableIvy,\n  };\n}\n\nfunction getNgOptionDiagnostics(options: CompilerOptions): ReadonlyArray<Diagnostic> {\n  if (options.annotationsAs) {\n    switch (options.annotationsAs) {\n      case 'decorators':\n      case 'static fields':\n        break;\n      default:\n        return [{\n          messageText:\n              'Angular compiler options \"annotationsAs\" only supports \"static fields\" and \"decorators\"',\n          category: ts.DiagnosticCategory.Error,\n          source: SOURCE,\n          code: DEFAULT_ERROR_CODE\n        }];\n    }\n  }\n  return [];\n}\n\nfunction normalizeSeparators(path: string): string {\n  return path.replace(/\\\\/g, '/');\n}\n\n/**\n * Returns a function that can adjust a path from source path to out path,\n * based on an existing mapping from source to out path.\n *\n * TODO(tbosch): talk to the TypeScript team to expose their logic for calculating the `rootDir`\n * if none was specified.\n *\n * Note: This function works on normalized paths from typescript.\n *\n * @param outDir\n * @param outSrcMappings\n */\nexport function createSrcToOutPathMapper(\n    outDir: string | undefined, sampleSrcFileName: string | undefined,\n    sampleOutFileName: string | undefined, host: {\n      dirname: typeof path.dirname,\n      resolve: typeof path.resolve,\n      relative: typeof path.relative\n    } = path): (srcFileName: string) => string {\n  let srcToOutPath: (srcFileName: string) => string;\n  if (outDir) {\n    let path: {} = {};  // Ensure we error if we use `path` instead of `host`.\n    if (sampleSrcFileName == null || sampleOutFileName == null) {\n      throw new Error(`Can't calculate the rootDir without a sample srcFileName / outFileName. `);\n    }\n    const srcFileDir = normalizeSeparators(host.dirname(sampleSrcFileName));\n    const outFileDir = normalizeSeparators(host.dirname(sampleOutFileName));\n    if (srcFileDir === outFileDir) {\n      return (srcFileName) => srcFileName;\n    }\n    // calculate the common suffix, stopping\n    // at `outDir`.\n    const srcDirParts = srcFileDir.split('/');\n    const outDirParts = normalizeSeparators(host.relative(outDir, outFileDir)).split('/');\n    let i = 0;\n    while (i < Math.min(srcDirParts.length, outDirParts.length) &&\n           srcDirParts[srcDirParts.length - 1 - i] === outDirParts[outDirParts.length - 1 - i])\n      i++;\n    const rootDir = srcDirParts.slice(0, srcDirParts.length - i).join('/');\n    srcToOutPath = (srcFileName) => host.resolve(outDir, host.relative(rootDir, srcFileName));\n  } else {\n    srcToOutPath = (srcFileName) => srcFileName;\n  }\n  return srcToOutPath;\n}\n\nexport function i18nExtract(\n    formatName: string | null, outFile: string | null, host: ts.CompilerHost,\n    options: CompilerOptions, bundle: MessageBundle): string[] {\n  formatName = formatName || 'xlf';\n  // Checks the format and returns the extension\n  const ext = i18nGetExtension(formatName);\n  const content = i18nSerialize(bundle, formatName, options);\n  const dstFile = outFile || `messages.${ext}`;\n  const dstPath = path.resolve(options.outDir || options.basePath !, dstFile);\n  host.writeFile(dstPath, content, false, undefined, []);\n  return [dstPath];\n}\n\nexport function i18nSerialize(\n    bundle: MessageBundle, formatName: string, options: CompilerOptions): string {\n  const format = formatName.toLowerCase();\n  let serializer: Serializer;\n\n  switch (format) {\n    case 'xmb':\n      serializer = new Xmb();\n      break;\n    case 'xliff2':\n    case 'xlf2':\n      serializer = new Xliff2();\n      break;\n    case 'xlf':\n    case 'xliff':\n    default:\n      serializer = new Xliff();\n  }\n\n  return bundle.write(serializer, getPathNormalizer(options.basePath));\n}\n\nfunction getPathNormalizer(basePath?: string) {\n  // normalize source paths by removing the base path and always using \"/\" as a separator\n  return (sourcePath: string) => {\n    sourcePath = basePath ? path.relative(basePath, sourcePath) : sourcePath;\n    return sourcePath.split(path.sep).join('/');\n  };\n}\n\nexport function i18nGetExtension(formatName: string): string {\n  const format = formatName.toLowerCase();\n\n  switch (format) {\n    case 'xmb':\n      return 'xmb';\n    case 'xlf':\n    case 'xlif':\n    case 'xliff':\n    case 'xlf2':\n    case 'xliff2':\n      return 'xlf';\n  }\n\n  throw new Error(`Unsupported format \"${formatName}\"`);\n}\n\nfunction mergeEmitResults(emitResults: ts.EmitResult[]): ts.EmitResult {\n  const diagnostics: ts.Diagnostic[] = [];\n  let emitSkipped = false;\n  const emittedFiles: string[] = [];\n  for (const er of emitResults) {\n    diagnostics.push(...er.diagnostics);\n    emitSkipped = emitSkipped || er.emitSkipped;\n    emittedFiles.push(...(er.emittedFiles || []));\n  }\n  return {diagnostics, emitSkipped, emittedFiles};\n}\n\nfunction diagnosticSourceOfSpan(span: ParseSourceSpan): ts.SourceFile {\n  // For diagnostics, TypeScript only uses the fileName and text properties.\n  // The redundant '()' are here is to avoid having clang-format breaking the line incorrectly.\n  return ({ fileName: span.start.file.url, text: span.start.file.content } as any);\n}\n\nfunction diagnosticSourceOfFileName(fileName: string, program: ts.Program): ts.SourceFile {\n  const sourceFile = program.getSourceFile(fileName);\n  if (sourceFile) return sourceFile;\n\n  // If we are reporting diagnostics for a source file that is not in the project then we need\n  // to fake a source file so the diagnostic formatting routines can emit the file name.\n  // The redundant '()' are here is to avoid having clang-format breaking the line incorrectly.\n  return ({ fileName, text: '' } as any);\n}\n\n\nfunction diagnosticChainFromFormattedDiagnosticChain(chain: FormattedMessageChain):\n    DiagnosticMessageChain {\n  return {\n    messageText: chain.message,\n    next: chain.next && diagnosticChainFromFormattedDiagnosticChain(chain.next),\n    position: chain.position\n  };\n}\n\nfunction syntaxErrorToDiagnostics(error: Error): Diagnostic[] {\n  const parserErrors = getParseErrors(error);\n  if (parserErrors && parserErrors.length) {\n    return parserErrors.map<Diagnostic>(e => ({\n                                          messageText: e.contextualMessage(),\n                                          file: diagnosticSourceOfSpan(e.span),\n                                          start: e.span.start.offset,\n                                          length: e.span.end.offset - e.span.start.offset,\n                                          category: ts.DiagnosticCategory.Error,\n                                          source: SOURCE,\n                                          code: DEFAULT_ERROR_CODE\n                                        }));\n  } else if (isFormattedError(error)) {\n    return [{\n      messageText: error.message,\n      chain: error.chain && diagnosticChainFromFormattedDiagnosticChain(error.chain),\n      category: ts.DiagnosticCategory.Error,\n      source: SOURCE,\n      code: DEFAULT_ERROR_CODE,\n      position: error.position\n    }];\n  }\n  // Produce a Diagnostic anyway since we know for sure `error` is a SyntaxError\n  return [{\n    messageText: error.message,\n    category: ts.DiagnosticCategory.Error,\n    code: DEFAULT_ERROR_CODE,\n    source: SOURCE,\n  }];\n}\n"]}