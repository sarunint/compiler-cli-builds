{"version":3,"file":"tsc_pass_through.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/transformers/tsc_pass_through.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAIH,iCAAiC;AAEjC,4CAAmD;AAInD;;;;;;;GAOG;AACH,MAAa,qBAAqB;IAGhC,YACI,SAAgC,EAAU,OAA4B,EAC9D,IAAsB,EAAE,UAAwB;QADd,YAAO,GAAP,OAAO,CAAqB;QAC9D,SAAI,GAAJ,IAAI,CAAkB;QAChC,IAAI,CAAC,SAAS;YACV,EAAE,CAAC,aAAa,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,IAAI,UAAU,CAAC,YAAY,EAAE,CAAC,CAAC;IAC1F,CAAC;IAED,YAAY,KAAiB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IAErD,sBAAsB,CAAC,iBACS;QAC9B,OAAO,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;IACjE,CAAC;IAED,sBAAsB,CAAC,iBACS;QAC9B,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,yBAAyB,CACrB,UAAoC,EACpC,iBAAkD;QACpD,OAAO,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;IAC/E,CAAC;IAED,0BAA0B,CAAC,iBACS;QAClC,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,wBAAwB,CACpB,UAAoC,EACpC,iBAAkD;QACpD,OAAO,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;IAC9E,CAAC;IAED,wBAAwB,CACpB,QAA2B,EAC3B,iBAAkD;QACpD,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,oBAAoB,KAAoB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;IAEnE,cAAc,CAAC,UAA6B;QAC1C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,mBAAmB;QACjB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,wBAAwB;QACtB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,qBAAqB;QACnB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,IAAI,CAAC,IAMJ;QACC,MAAM,YAAY,GAAG,IAAI,IAAI,IAAI,CAAC,YAAY,IAAI,mBAAmB,CAAC;QAEtE,MAAM,UAAU,GAAG,YAAY,CAAC;YAC9B,OAAO,EAAE,IAAI,CAAC,SAAS;YACvB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,gBAAgB,EAAE,KAAK;YACvB,kBAAkB,EAAE,EAAC,MAAM,EAAE,CAAC,2BAAkB,CAAC,EAAC;SACnD,CAAC,CAAC;QACH,OAAO,UAAU,CAAC;IACpB,CAAC;CACF;AAjFD,sDAiFC;AAED,MAAM,mBAAmB,GACrB,CAAC,EAAC,OAAO,EAAE,gBAAgB,EAAE,SAAS,EAAE,iBAAiB,EAAE,gBAAgB,EACzE,kBAAkB,EAAC,EAAE,EAAE,CACrB,OAAO,CAAC,IAAI,CACR,gBAAgB,EAAE,SAAS,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,kBAAkB,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GeneratedFile} from '@angular/compiler';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {ivySwitchTransform} from '../ngtsc/switch';\nimport * as api from '../transformers/api';\n\n\n/**\n * An implementation of the `Program` API which behaves similarly to plain `tsc`.\n *\n * The only Angular specific behavior included in this `Program` is the operation of the Ivy\n * switch to turn on render3 behavior.\n *\n * This allows `ngc` to behave like `tsc` in cases where JIT code needs to be tested.\n */\nexport class TscPassThroughProgram implements api.Program {\n  private tsProgram: ts.Program;\n\n  constructor(\n      rootNames: ReadonlyArray<string>, private options: api.CompilerOptions,\n      private host: api.CompilerHost, oldProgram?: api.Program) {\n    this.tsProgram =\n        ts.createProgram(rootNames, options, host, oldProgram && oldProgram.getTsProgram());\n  }\n\n  getTsProgram(): ts.Program { return this.tsProgram; }\n\n  getTsOptionDiagnostics(cancellationToken?: ts.CancellationToken|\n                         undefined): ReadonlyArray<ts.Diagnostic> {\n    return this.tsProgram.getOptionsDiagnostics(cancellationToken);\n  }\n\n  getNgOptionDiagnostics(cancellationToken?: ts.CancellationToken|\n                         undefined): ReadonlyArray<api.Diagnostic> {\n    return [];\n  }\n\n  getTsSyntacticDiagnostics(\n      sourceFile?: ts.SourceFile|undefined,\n      cancellationToken?: ts.CancellationToken|undefined): ReadonlyArray<ts.Diagnostic> {\n    return this.tsProgram.getSyntacticDiagnostics(sourceFile, cancellationToken);\n  }\n\n  getNgStructuralDiagnostics(cancellationToken?: ts.CancellationToken|\n                             undefined): ReadonlyArray<api.Diagnostic> {\n    return [];\n  }\n\n  getTsSemanticDiagnostics(\n      sourceFile?: ts.SourceFile|undefined,\n      cancellationToken?: ts.CancellationToken|undefined): ReadonlyArray<ts.Diagnostic> {\n    return this.tsProgram.getSemanticDiagnostics(sourceFile, cancellationToken);\n  }\n\n  getNgSemanticDiagnostics(\n      fileName?: string|undefined,\n      cancellationToken?: ts.CancellationToken|undefined): ReadonlyArray<api.Diagnostic> {\n    return [];\n  }\n\n  loadNgStructureAsync(): Promise<void> { return Promise.resolve(); }\n\n  listLazyRoutes(entryRoute?: string|undefined): api.LazyRoute[] {\n    throw new Error('Method not implemented.');\n  }\n\n  getLibrarySummaries(): Map<string, api.LibrarySummary> {\n    throw new Error('Method not implemented.');\n  }\n\n  getEmittedGeneratedFiles(): Map<string, GeneratedFile> {\n    throw new Error('Method not implemented.');\n  }\n\n  getEmittedSourceFiles(): Map<string, ts.SourceFile> {\n    throw new Error('Method not implemented.');\n  }\n\n  emit(opts?: {\n    emitFlags?: api.EmitFlags,\n    cancellationToken?: ts.CancellationToken,\n    customTransformers?: api.CustomTransformers,\n    emitCallback?: api.TsEmitCallback,\n    mergeEmitResultsCallback?: api.TsMergeEmitResultsCallback\n  }): ts.EmitResult {\n    const emitCallback = opts && opts.emitCallback || defaultEmitCallback;\n\n    const emitResult = emitCallback({\n      program: this.tsProgram,\n      host: this.host,\n      options: this.options,\n      emitOnlyDtsFiles: false,\n      customTransformers: {before: [ivySwitchTransform]},\n    });\n    return emitResult;\n  }\n}\n\nconst defaultEmitCallback: api.TsEmitCallback =\n    ({program, targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles,\n      customTransformers}) =>\n        program.emit(\n            targetSourceFile, writeFile, cancellationToken, emitOnlyDtsFiles, customTransformers);\n"]}