{"version":3,"file":"nocollapse_hack.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/transformers/nocollapse_hack.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,0EAA0E;AAC1E,6FAA6F;AAC7F,kGAAkG;AAClG,mGAAmG;AACnG,iGAAiG;AACjG,qEAAqE;AACrE,EAAE;AACF,wEAAwE;AACxE,EAAE;AACF,mFAAmF;AAEnF,+CAA+C;AAC/C,MAAM,mBAAmB,GAAG;IAC1B,WAAW;IACX,gBAAgB;IAChB,gBAAgB;IAChB,iBAAiB;IACjB,eAAe;IACf,aAAa;IACb,WAAW;CACZ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAEZ,+EAA+E;AAC/E,MAAM,qBAAqB,GAAG,sBAAsB,mBAAmB,GAAG,CAAC;AAE3E,qFAAqF;AACrF,8FAA8F;AAC9F,gCAAgC;AAChC,MAAM,mBAAmB,GAAG,WAAW,qBAAqB,SAAS,CAAC;AAEtE,iGAAiG;AACjG,6EAA6E;AAC7E,MAAM,aAAa,GAAG,IAAI,MAAM,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;AAE7D,MAAM,uBAAuB,GACzB,iDAAiD,mBAAmB,KAAK,CAAC;AAE9E,MAAM,qBAAqB,GAAG,IAAI,MAAM,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;AAEzE,gGAAgG;AAChG,gGAAgG;AAChG,2EAA2E;AAC3E,MAAM,kBAAkB,GAAG,2BAA2B,CAAC;AAEvD,MAAM,0BAA0B,GAAG,kBAAkB,CAAC;AAEtD,SAAgB,cAAc,CAAC,QAAgB;IAC7C,OAAO,QAAQ,CAAC,OAAO,CAAC,aAAa,EAAE,kBAAkB,CAAC;SACrD,OAAO,CAAC,qBAAqB,EAAE,0BAA0B,CAAC,CAAC;AAClE,CAAC;AAHD,wCAGC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Closure compiler transforms the form `Service.ngInjectableDef = X` into\n// `Service$ngInjectableDef = X`. To prevent this transformation, such assignments need to be\n// annotated with @nocollapse. Unfortunately, a bug in Typescript where comments aren't propagated\n// through the TS transformations precludes adding the comment via the AST. This workaround detects\n// the static assignments to R3 properties such as ngInjectableDef using a regex, as output files\n// are written, and applies the annotation through regex replacement.\n//\n// TODO(alxhub): clean up once fix for TS transformers lands in upstream\n//\n// Typescript reference issue: https://github.com/Microsoft/TypeScript/issues/22497\n\n// Pattern matching all Render3 property names.\nconst R3_DEF_NAME_PATTERN = [\n  'ngBaseDef',\n  'ngComponentDef',\n  'ngDirectiveDef',\n  'ngInjectableDef',\n  'ngInjectorDef',\n  'ngModuleDef',\n  'ngPipeDef',\n].join('|');\n\n// Pattern matching `Identifier.property` where property is a Render3 property.\nconst R3_DEF_ACCESS_PATTERN = `[^\\\\s\\\\.()[\\\\]]+\\.(${R3_DEF_NAME_PATTERN})`;\n\n// Pattern matching a source line that contains a Render3 static property assignment.\n// It declares two matching groups - one for the preceding whitespace, the second for the rest\n// of the assignment expression.\nconst R3_DEF_LINE_PATTERN = `^(\\\\s*)(${R3_DEF_ACCESS_PATTERN} = .*)$`;\n\n// Regex compilation of R3_DEF_LINE_PATTERN. Matching group 1 yields the whitespace preceding the\n// assignment, matching group 2 gives the rest of the assignment expressions.\nconst R3_MATCH_DEFS = new RegExp(R3_DEF_LINE_PATTERN, 'gmu');\n\nconst R3_TSICKLE_DECL_PATTERN =\n    `(\\\\/\\\\*\\\\*[*\\\\s]*)(@[^*]+\\\\*\\\\/\\\\s+[^.]+\\\\.(?:${R3_DEF_NAME_PATTERN});)`;\n\nconst R3_MATCH_TSICKLE_DECL = new RegExp(R3_TSICKLE_DECL_PATTERN, 'gmu');\n\n// Replacement string that complements R3_MATCH_DEFS. It inserts `/** @nocollapse */` before the\n// assignment but after any indentation. Note that this will mess up any sourcemaps on this line\n// (though there shouldn't be any, since Render3 properties are synthetic).\nconst R3_NOCOLLAPSE_DEFS = '$1\\/** @nocollapse *\\/ $2';\n\nconst R3_NOCOLLAPSE_TSICKLE_DECL = '$1@nocollapse $2';\n\nexport function nocollapseHack(contents: string): string {\n  return contents.replace(R3_MATCH_DEFS, R3_NOCOLLAPSE_DEFS)\n      .replace(R3_MATCH_TSICKLE_DECL, R3_NOCOLLAPSE_TSICKLE_DECL);\n}\n"]}