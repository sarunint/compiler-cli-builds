{"version":3,"file":"compiler_host.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/transformers/compiler_host.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AotCompilerHost, EmitterVisitorContext, ExternalReference, GeneratedFile, ParseSourceSpan, TypeScriptEmitter, collectExternalReferences, syntaxError} from '@angular/compiler';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {TypeCheckHost} from '../diagnostics/translate_diagnostics';\nimport {METADATA_VERSION, ModuleMetadata} from '../metadata/index';\n\nimport {CompilerHost, CompilerOptions, LibrarySummary} from './api';\nimport {MetadataReaderHost, createMetadataReaderCache, readMetadata} from './metadata_reader';\nimport {DTS, GENERATED_FILES, isInRootDir, relativeToRootDirs} from './util';\n\nconst NODE_MODULES_PACKAGE_NAME = /node_modules\\/((\\w|-|\\.)+|(@(\\w|-|\\.)+\\/(\\w|-|\\.)+))/;\nconst EXT = /(\\.ts|\\.d\\.ts|\\.js|\\.jsx|\\.tsx)$/;\n\nexport function createCompilerHost(\n    {options, tsHost = ts.createCompilerHost(options, true)}:\n        {options: CompilerOptions, tsHost?: ts.CompilerHost}): CompilerHost {\n  return tsHost;\n}\n\nexport interface MetadataProvider {\n  getMetadata(sourceFile: ts.SourceFile): ModuleMetadata|undefined;\n}\n\ninterface GenSourceFile {\n  externalReferences: Set<string>;\n  sourceFile: ts.SourceFile;\n  emitCtx: EmitterVisitorContext;\n}\n\nexport interface CodeGenerator {\n  generateFile(genFileName: string, baseFileName?: string): GeneratedFile;\n  findGeneratedFileNames(fileName: string): string[];\n}\n\nfunction assert<T>(condition: T | null | undefined) {\n  if (!condition) {\n    // TODO(chuckjaz): do the right thing\n  }\n  return condition !;\n}\n\n/**\n * Implements the following hosts based on an api.CompilerHost:\n * - ts.CompilerHost to be consumed by a ts.Program\n * - AotCompilerHost for @angular/compiler\n * - TypeCheckHost for mapping ts errors to ng errors (via translateDiagnostics)\n */\nexport class TsCompilerAotCompilerTypeCheckHostAdapter implements ts.CompilerHost, AotCompilerHost,\n    TypeCheckHost {\n  private metadataReaderCache = createMetadataReaderCache();\n  private fileNameToModuleNameCache = new Map<string, string>();\n  private flatModuleIndexCache = new Map<string, boolean>();\n  private flatModuleIndexNames = new Set<string>();\n  private flatModuleIndexRedirectNames = new Set<string>();\n  private rootDirs: string[];\n  private moduleResolutionCache: ts.ModuleResolutionCache;\n  private originalSourceFiles = new Map<string, ts.SourceFile|null>();\n  private originalFileExistsCache = new Map<string, boolean>();\n  private generatedSourceFiles = new Map<string, GenSourceFile>();\n  private generatedCodeFor = new Map<string, string[]>();\n  private emitter = new TypeScriptEmitter();\n  private metadataReaderHost: MetadataReaderHost;\n\n  // TODO(issue/24571): remove '!'.\n  getCancellationToken !: () => ts.CancellationToken;\n  // TODO(issue/24571): remove '!'.\n  getDefaultLibLocation !: () => string;\n  // TODO(issue/24571): remove '!'.\n  trace !: (s: string) => void;\n  // TODO(issue/24571): remove '!'.\n  getDirectories !: (path: string) => string[];\n  resolveTypeReferenceDirectives?:\n      (names: string[], containingFile: string) => ts.ResolvedTypeReferenceDirective[];\n  directoryExists?: (directoryName: string) => boolean;\n\n  constructor(\n      private rootFiles: ReadonlyArray<string>, private options: CompilerOptions,\n      private context: CompilerHost, private metadataProvider: MetadataProvider,\n      private codeGenerator: CodeGenerator,\n      private librarySummaries = new Map<string, LibrarySummary>()) {\n    this.moduleResolutionCache = ts.createModuleResolutionCache(\n        this.context.getCurrentDirectory !(), this.context.getCanonicalFileName.bind(this.context));\n    const basePath = this.options.basePath !;\n    this.rootDirs =\n        (this.options.rootDirs || [this.options.basePath !]).map(p => path.resolve(basePath, p));\n    if (context.getDirectories) {\n      this.getDirectories = path => context.getDirectories !(path);\n    }\n    if (context.directoryExists) {\n      this.directoryExists = directoryName => context.directoryExists !(directoryName);\n    }\n    if (context.getCancellationToken) {\n      this.getCancellationToken = () => context.getCancellationToken !();\n    }\n    if (context.getDefaultLibLocation) {\n      this.getDefaultLibLocation = () => context.getDefaultLibLocation !();\n    }\n    if (context.resolveTypeReferenceDirectives) {\n      // Backward compatibility with TypeScript 2.9 and older since return\n      // type has changed from (ts.ResolvedTypeReferenceDirective | undefined)[]\n      // to ts.ResolvedTypeReferenceDirective[] in Typescript 3.0\n      type ts3ResolveTypeReferenceDirectives = (names: string[], containingFile: string) =>\n          ts.ResolvedTypeReferenceDirective[];\n      this.resolveTypeReferenceDirectives = (names: string[], containingFile: string) =>\n          (context.resolveTypeReferenceDirectives as ts3ResolveTypeReferenceDirectives) !(\n              names, containingFile);\n    }\n    if (context.trace) {\n      this.trace = s => context.trace !(s);\n    }\n    if (context.fileNameToModuleName) {\n      this.fileNameToModuleName = context.fileNameToModuleName.bind(context);\n    }\n    // Note: don't copy over context.moduleNameToFileName as we first\n    // normalize undefined containingFile to a filled containingFile.\n    if (context.resourceNameToFileName) {\n      this.resourceNameToFileName = context.resourceNameToFileName.bind(context);\n    }\n    if (context.toSummaryFileName) {\n      this.toSummaryFileName = context.toSummaryFileName.bind(context);\n    }\n    if (context.fromSummaryFileName) {\n      this.fromSummaryFileName = context.fromSummaryFileName.bind(context);\n    }\n    this.metadataReaderHost = {\n      cacheMetadata: () => true,\n      getSourceFileMetadata: (filePath) => {\n        const sf = this.getOriginalSourceFile(filePath);\n        return sf ? this.metadataProvider.getMetadata(sf) : undefined;\n      },\n      fileExists: (filePath) => this.originalFileExists(filePath),\n      readFile: (filePath) => assert(this.context.readFile(filePath)),\n    };\n  }\n\n  private resolveModuleName(moduleName: string, containingFile: string): ts.ResolvedModule\n      |undefined {\n    const rm = ts.resolveModuleName(\n                     moduleName, containingFile.replace(/\\\\/g, '/'), this.options, this,\n                     this.moduleResolutionCache)\n                   .resolvedModule;\n    if (rm && this.isSourceFile(rm.resolvedFileName) && DTS.test(rm.resolvedFileName)) {\n      // Case: generateCodeForLibraries = true and moduleName is\n      // a .d.ts file in a node_modules folder.\n      // Need to set isExternalLibraryImport to false so that generated files for that file\n      // are emitted.\n      rm.isExternalLibraryImport = false;\n    }\n    return rm;\n  }\n\n  // Note: We implement this method so that TypeScript and Angular share the same\n  // ts.ModuleResolutionCache\n  // and that we can tell ts.Program about our different opinion about\n  // ResolvedModule.isExternalLibraryImport\n  // (see our isSourceFile method).\n  resolveModuleNames(moduleNames: string[], containingFile: string): ts.ResolvedModule[] {\n    // TODO(tbosch): this seems to be a typing error in TypeScript,\n    // as it contains assertions that the result contains the same number of entries\n    // as the given module names.\n    return <ts.ResolvedModule[]>moduleNames.map(\n        moduleName => this.resolveModuleName(moduleName, containingFile));\n  }\n\n  moduleNameToFileName(m: string, containingFile?: string): string|null {\n    if (!containingFile) {\n      if (m.indexOf('.') === 0) {\n        throw new Error('Resolution of relative paths requires a containing file.');\n      }\n      // Any containing file gives the same result for absolute imports\n      containingFile = this.rootFiles[0];\n    }\n    if (this.context.moduleNameToFileName) {\n      return this.context.moduleNameToFileName(m, containingFile);\n    }\n    const resolved = this.resolveModuleName(m, containingFile);\n    return resolved ? resolved.resolvedFileName : null;\n  }\n\n  /**\n   * We want a moduleId that will appear in import statements in the generated code\n   * which will be written to `containingFile`.\n   *\n   * Note that we also generate files for files in node_modules, as libraries\n   * only ship .metadata.json files but not the generated code.\n   *\n   * Logic:\n   * 1. if the importedFile and the containingFile are from the project sources\n   *    or from the same node_modules package, use a relative path\n   * 2. if the importedFile is in a node_modules package,\n   *    use a path that starts with the package name.\n   * 3. Error if the containingFile is in the node_modules package\n   *    and the importedFile is in the project soures,\n   *    as that is a violation of the principle that node_modules packages cannot\n   *    import project sources.\n   */\n  fileNameToModuleName(importedFile: string, containingFile: string): string {\n    const cacheKey = `${importedFile}:${containingFile}`;\n    let moduleName = this.fileNameToModuleNameCache.get(cacheKey);\n    if (moduleName != null) {\n      return moduleName;\n    }\n\n    const originalImportedFile = importedFile;\n    if (this.options.traceResolution) {\n      console.error(\n          'fileNameToModuleName from containingFile', containingFile, 'to importedFile',\n          importedFile);\n    }\n\n    // drop extension\n    importedFile = importedFile.replace(EXT, '');\n    const importedFilePackageName = getPackageName(importedFile);\n    const containingFilePackageName = getPackageName(containingFile);\n\n    if (importedFilePackageName === containingFilePackageName ||\n        GENERATED_FILES.test(originalImportedFile)) {\n      const rootedContainingFile = relativeToRootDirs(containingFile, this.rootDirs);\n      const rootedImportedFile = relativeToRootDirs(importedFile, this.rootDirs);\n\n      if (rootedContainingFile !== containingFile && rootedImportedFile !== importedFile) {\n        // if both files are contained in the `rootDirs`, then strip the rootDirs\n        containingFile = rootedContainingFile;\n        importedFile = rootedImportedFile;\n      }\n      moduleName = dotRelative(path.dirname(containingFile), importedFile);\n    } else if (importedFilePackageName) {\n      moduleName = stripNodeModulesPrefix(importedFile);\n      if (originalImportedFile.endsWith('.d.ts')) {\n        // the moduleName for these typings could be shortented to the npm package name\n        // if the npm package typings matches the importedFile\n        try {\n          const modulePath = importedFile.substring(0, importedFile.length - moduleName.length) +\n              importedFilePackageName;\n          const packageJson = require(modulePath + '/package.json');\n          const packageTypings = path.posix.join(modulePath, packageJson.typings);\n          if (packageTypings === originalImportedFile) {\n            moduleName = importedFilePackageName;\n          }\n        } catch (e) {\n          // the above require() will throw if there is no package.json file\n          // and this is safe to ignore and correct to keep the longer\n          // moduleName in this case\n        }\n      }\n    } else {\n      throw new Error(\n          `Trying to import a source file from a node_modules package: import ${originalImportedFile} from ${containingFile}`);\n    }\n\n    this.fileNameToModuleNameCache.set(cacheKey, moduleName);\n    return moduleName;\n  }\n\n  resourceNameToFileName(resourceName: string, containingFile: string): string|null {\n    // Note: we convert package paths into relative paths to be compatible with the the\n    // previous implementation of UrlResolver.\n    const firstChar = resourceName[0];\n    if (firstChar === '/') {\n      resourceName = resourceName.slice(1);\n    } else if (firstChar !== '.') {\n      resourceName = `./${resourceName}`;\n    }\n    const filePathWithNgResource =\n        this.moduleNameToFileName(addNgResourceSuffix(resourceName), containingFile);\n    const result = filePathWithNgResource ? stripNgResourceSuffix(filePathWithNgResource) : null;\n    // Used under Bazel to report more specific error with remediation advice\n    if (!result && (this.context as any).reportMissingResource) {\n      (this.context as any).reportMissingResource(resourceName);\n    }\n    return result;\n  }\n\n  toSummaryFileName(fileName: string, referringSrcFileName: string): string {\n    return this.fileNameToModuleName(fileName, referringSrcFileName);\n  }\n\n  fromSummaryFileName(fileName: string, referringLibFileName: string): string {\n    const resolved = this.moduleNameToFileName(fileName, referringLibFileName);\n    if (!resolved) {\n      throw new Error(`Could not resolve ${fileName} from ${referringLibFileName}`);\n    }\n    return resolved;\n  }\n\n  parseSourceSpanOf(fileName: string, line: number, character: number): ParseSourceSpan|null {\n    const data = this.generatedSourceFiles.get(fileName);\n    if (data && data.emitCtx) {\n      return data.emitCtx.spanOf(line, character);\n    }\n    return null;\n  }\n\n  private getOriginalSourceFile(\n      filePath: string, languageVersion?: ts.ScriptTarget,\n      onError?: ((message: string) => void)|undefined): ts.SourceFile|null {\n    // Note: we need the explicit check via `has` as we also cache results\n    // that were null / undefined.\n    if (this.originalSourceFiles.has(filePath)) {\n      return this.originalSourceFiles.get(filePath) !;\n    }\n    if (!languageVersion) {\n      languageVersion = this.options.target || ts.ScriptTarget.Latest;\n    }\n    // Note: This can also return undefined,\n    // as the TS typings are not correct!\n    const sf = this.context.getSourceFile(filePath, languageVersion, onError) || null;\n    this.originalSourceFiles.set(filePath, sf);\n    return sf;\n  }\n\n  updateGeneratedFile(genFile: GeneratedFile): ts.SourceFile {\n    if (!genFile.stmts) {\n      throw new Error(\n          `Invalid Argument: Expected a GenerateFile with statements. ${genFile.genFileUrl}`);\n    }\n    const oldGenFile = this.generatedSourceFiles.get(genFile.genFileUrl);\n    if (!oldGenFile) {\n      throw new Error(`Illegal State: previous GeneratedFile not found for ${genFile.genFileUrl}.`);\n    }\n    const newRefs = genFileExternalReferences(genFile);\n    const oldRefs = oldGenFile.externalReferences;\n    let refsAreEqual = oldRefs.size === newRefs.size;\n    if (refsAreEqual) {\n      newRefs.forEach(r => refsAreEqual = refsAreEqual && oldRefs.has(r));\n    }\n    if (!refsAreEqual) {\n      throw new Error(\n          `Illegal State: external references changed in ${genFile.genFileUrl}.\\nOld: ${Array.from(oldRefs)}.\\nNew: ${Array.from(newRefs)}`);\n    }\n    return this.addGeneratedFile(genFile, newRefs);\n  }\n\n  private addGeneratedFile(genFile: GeneratedFile, externalReferences: Set<string>): ts.SourceFile {\n    if (!genFile.stmts) {\n      throw new Error(\n          `Invalid Argument: Expected a GenerateFile with statements. ${genFile.genFileUrl}`);\n    }\n    const {sourceText, context} = this.emitter.emitStatementsAndContext(\n        genFile.genFileUrl, genFile.stmts, /* preamble */ '',\n        /* emitSourceMaps */ false);\n    const sf = ts.createSourceFile(\n        genFile.genFileUrl, sourceText, this.options.target || ts.ScriptTarget.Latest);\n    if ((this.options.module === ts.ModuleKind.AMD || this.options.module === ts.ModuleKind.UMD) &&\n        this.context.amdModuleName) {\n      const moduleName = this.context.amdModuleName(sf);\n      if (moduleName) sf.moduleName = moduleName;\n    }\n    this.generatedSourceFiles.set(genFile.genFileUrl, {\n      sourceFile: sf,\n      emitCtx: context, externalReferences,\n    });\n    return sf;\n  }\n\n  shouldGenerateFile(fileName: string): {generate: boolean, baseFileName?: string} {\n    // TODO(tbosch): allow generating files that are not in the rootDir\n    // See https://github.com/angular/angular/issues/19337\n    if (!isInRootDir(fileName, this.options)) {\n      return {generate: false};\n    }\n    const genMatch = GENERATED_FILES.exec(fileName);\n    if (!genMatch) {\n      return {generate: false};\n    }\n    const [, base, genSuffix, suffix] = genMatch;\n    if (suffix !== 'ts' && suffix !== 'tsx') {\n      return {generate: false};\n    }\n    let baseFileName: string|undefined;\n    if (genSuffix.indexOf('ngstyle') >= 0) {\n      // Note: ngstyle files have names like `afile.css.ngstyle.ts`\n      if (!this.originalFileExists(base)) {\n        return {generate: false};\n      }\n    } else {\n      // Note: on-the-fly generated files always have a `.ts` suffix,\n      // but the file from which we generated it can be a `.ts`/ `.tsx`/ `.d.ts`\n      // (see options.generateCodeForLibraries).\n      baseFileName = [`${base}.ts`, `${base}.tsx`, `${base}.d.ts`].find(\n          baseFileName => this.isSourceFile(baseFileName) && this.originalFileExists(baseFileName));\n      if (!baseFileName) {\n        return {generate: false};\n      }\n    }\n    return {generate: true, baseFileName};\n  }\n\n  shouldGenerateFilesFor(fileName: string) {\n    // TODO(tbosch): allow generating files that are not in the rootDir\n    // See https://github.com/angular/angular/issues/19337\n    return !GENERATED_FILES.test(fileName) && this.isSourceFile(fileName) &&\n        isInRootDir(fileName, this.options);\n  }\n\n  getSourceFile(\n      fileName: string, languageVersion: ts.ScriptTarget,\n      onError?: ((message: string) => void)|undefined): ts.SourceFile {\n    // Note: Don't exit early in this method to make sure\n    // we always have up to date references on the file!\n    let genFileNames: string[] = [];\n    let sf = this.getGeneratedFile(fileName);\n    if (!sf) {\n      const summary = this.librarySummaries.get(fileName);\n      if (summary) {\n        if (!summary.sourceFile) {\n          summary.sourceFile = ts.createSourceFile(\n              fileName, summary.text, this.options.target || ts.ScriptTarget.Latest);\n        }\n        sf = summary.sourceFile;\n        genFileNames = [];\n      }\n    }\n    if (!sf) {\n      sf = this.getOriginalSourceFile(fileName);\n      const cachedGenFiles = this.generatedCodeFor.get(fileName);\n      if (cachedGenFiles) {\n        genFileNames = cachedGenFiles;\n      } else {\n        if (!this.options.noResolve && this.shouldGenerateFilesFor(fileName)) {\n          genFileNames = this.codeGenerator.findGeneratedFileNames(fileName).filter(\n              fileName => this.shouldGenerateFile(fileName).generate);\n        }\n        this.generatedCodeFor.set(fileName, genFileNames);\n      }\n    }\n    if (sf) {\n      addReferencesToSourceFile(sf, genFileNames);\n    }\n    // TODO(tbosch): TypeScript's typings for getSourceFile are incorrect,\n    // as it can very well return undefined.\n    return sf !;\n  }\n\n  private getGeneratedFile(fileName: string): ts.SourceFile|null {\n    const genSrcFile = this.generatedSourceFiles.get(fileName);\n    if (genSrcFile) {\n      return genSrcFile.sourceFile;\n    }\n    const {generate, baseFileName} = this.shouldGenerateFile(fileName);\n    if (generate) {\n      const genFile = this.codeGenerator.generateFile(fileName, baseFileName);\n      return this.addGeneratedFile(genFile, genFileExternalReferences(genFile));\n    }\n    return null;\n  }\n\n  private originalFileExists(fileName: string): boolean {\n    let fileExists = this.originalFileExistsCache.get(fileName);\n    if (fileExists == null) {\n      fileExists = this.context.fileExists(fileName);\n      this.originalFileExistsCache.set(fileName, fileExists);\n    }\n    return fileExists;\n  }\n\n  fileExists(fileName: string): boolean {\n    fileName = stripNgResourceSuffix(fileName);\n    if (this.librarySummaries.has(fileName) || this.generatedSourceFiles.has(fileName)) {\n      return true;\n    }\n    if (this.shouldGenerateFile(fileName).generate) {\n      return true;\n    }\n    return this.originalFileExists(fileName);\n  }\n\n  loadSummary(filePath: string): string|null {\n    const summary = this.librarySummaries.get(filePath);\n    if (summary) {\n      return summary.text;\n    }\n    if (this.originalFileExists(filePath)) {\n      return assert(this.context.readFile(filePath));\n    }\n    return null;\n  }\n\n  isSourceFile(filePath: string): boolean {\n    // Don't generate any files nor typecheck them\n    // if skipTemplateCodegen is set and fullTemplateTypeCheck is not yet set,\n    // for backwards compatibility.\n    if (this.options.skipTemplateCodegen && !this.options.fullTemplateTypeCheck) {\n      return false;\n    }\n    // If we have a summary from a previous compilation,\n    // treat the file never as a source file.\n    if (this.librarySummaries.has(filePath)) {\n      return false;\n    }\n    if (GENERATED_FILES.test(filePath)) {\n      return false;\n    }\n    if (this.options.generateCodeForLibraries === false && DTS.test(filePath)) {\n      return false;\n    }\n    if (DTS.test(filePath)) {\n      // Check for a bundle index.\n      if (this.hasBundleIndex(filePath)) {\n        const normalFilePath = path.normalize(filePath);\n        return this.flatModuleIndexNames.has(normalFilePath) ||\n            this.flatModuleIndexRedirectNames.has(normalFilePath);\n      }\n    }\n    return true;\n  }\n\n  readFile(fileName: string) {\n    const summary = this.librarySummaries.get(fileName);\n    if (summary) {\n      return summary.text;\n    }\n    return this.context.readFile(fileName);\n  }\n\n  getMetadataFor(filePath: string): ModuleMetadata[]|undefined {\n    return readMetadata(filePath, this.metadataReaderHost, this.metadataReaderCache);\n  }\n\n  loadResource(filePath: string): Promise<string>|string {\n    if (this.context.readResource) return this.context.readResource(filePath);\n    if (!this.originalFileExists(filePath)) {\n      throw syntaxError(`Error: Resource file not found: ${filePath}`);\n    }\n    return assert(this.context.readFile(filePath));\n  }\n\n  getOutputName(filePath: string): string {\n    return path.relative(this.getCurrentDirectory(), filePath);\n  }\n\n  private hasBundleIndex(filePath: string): boolean {\n    const checkBundleIndex = (directory: string): boolean => {\n      let result = this.flatModuleIndexCache.get(directory);\n      if (result == null) {\n        if (path.basename(directory) == 'node_module') {\n          // Don't look outside the node_modules this package is installed in.\n          result = false;\n        } else {\n          // A bundle index exists if the typings .d.ts file has a metadata.json that has an\n          // importAs.\n          try {\n            const packageFile = path.join(directory, 'package.json');\n            if (this.originalFileExists(packageFile)) {\n              // Once we see a package.json file, assume false until it we find the bundle index.\n              result = false;\n              const packageContent: any = JSON.parse(assert(this.context.readFile(packageFile)));\n              if (packageContent.typings) {\n                const typings = path.normalize(path.join(directory, packageContent.typings));\n                if (DTS.test(typings)) {\n                  const metadataFile = typings.replace(DTS, '.metadata.json');\n                  if (this.originalFileExists(metadataFile)) {\n                    const metadata = JSON.parse(assert(this.context.readFile(metadataFile)));\n                    if (metadata.flatModuleIndexRedirect) {\n                      this.flatModuleIndexRedirectNames.add(typings);\n                      // Note: don't set result = true,\n                      // as this would mark this folder\n                      // as having a bundleIndex too early without\n                      // filling the bundleIndexNames.\n                    } else if (metadata.importAs) {\n                      this.flatModuleIndexNames.add(typings);\n                      result = true;\n                    }\n                  }\n                }\n              }\n            } else {\n              const parent = path.dirname(directory);\n              if (parent != directory) {\n                // Try the parent directory.\n                result = checkBundleIndex(parent);\n              } else {\n                result = false;\n              }\n            }\n          } catch (e) {\n            // If we encounter any errors assume we this isn't a bundle index.\n            result = false;\n          }\n        }\n        this.flatModuleIndexCache.set(directory, result);\n      }\n      return result;\n    };\n\n    return checkBundleIndex(path.dirname(filePath));\n  }\n\n  getDefaultLibFileName = (options: ts.CompilerOptions) =>\n      this.context.getDefaultLibFileName(options)\n  getCurrentDirectory = () => this.context.getCurrentDirectory();\n  getCanonicalFileName = (fileName: string) => this.context.getCanonicalFileName(fileName);\n  useCaseSensitiveFileNames = () => this.context.useCaseSensitiveFileNames();\n  getNewLine = () => this.context.getNewLine();\n  // Make sure we do not `host.realpath()` from TS as we do not want to resolve symlinks.\n  // https://github.com/Microsoft/TypeScript/issues/9552\n  realpath = (p: string) => p;\n  writeFile = this.context.writeFile.bind(this.context);\n}\n\nfunction genFileExternalReferences(genFile: GeneratedFile): Set<string> {\n  return new Set(collectExternalReferences(genFile.stmts !).map(er => er.moduleName !));\n}\n\nfunction addReferencesToSourceFile(sf: ts.SourceFile, genFileNames: string[]) {\n  // Note: as we modify ts.SourceFiles we need to keep the original\n  // value for `referencedFiles` around in cache the original host is caching ts.SourceFiles.\n  // Note: cloning the ts.SourceFile is expensive as the nodes in have parent pointers,\n  // i.e. we would also need to clone and adjust all nodes.\n  let originalReferencedFiles: ReadonlyArray<ts.FileReference> =\n      (sf as any).originalReferencedFiles;\n  if (!originalReferencedFiles) {\n    originalReferencedFiles = sf.referencedFiles;\n    (sf as any).originalReferencedFiles = originalReferencedFiles;\n  }\n  const newReferencedFiles = [...originalReferencedFiles];\n  genFileNames.forEach(gf => newReferencedFiles.push({fileName: gf, pos: 0, end: 0}));\n  sf.referencedFiles = newReferencedFiles;\n}\n\nexport function getOriginalReferences(sourceFile: ts.SourceFile): ts.FileReference[]|undefined {\n  return sourceFile && (sourceFile as any).originalReferencedFiles;\n}\n\nfunction dotRelative(from: string, to: string): string {\n  const rPath: string = path.relative(from, to).replace(/\\\\/g, '/');\n  return rPath.startsWith('.') ? rPath : './' + rPath;\n}\n\n/**\n * Moves the path into `genDir` folder while preserving the `node_modules` directory.\n */\nfunction getPackageName(filePath: string): string|null {\n  const match = NODE_MODULES_PACKAGE_NAME.exec(filePath);\n  return match ? match[1] : null;\n}\n\nfunction stripNodeModulesPrefix(filePath: string): string {\n  return filePath.replace(/.*node_modules\\//, '');\n}\n\nfunction getNodeModulesPrefix(filePath: string): string|null {\n  const match = /.*node_modules\\//.exec(filePath);\n  return match ? match[1] : null;\n}\n\nfunction stripNgResourceSuffix(fileName: string): string {\n  return fileName.replace(/\\.\\$ngresource\\$.*/, '');\n}\n\nfunction addNgResourceSuffix(fileName: string): string {\n  return `${fileName}.$ngresource$`;\n}\n"]}