{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/transformers/util.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,gDAA8C;AAC9C,6BAA6B;AAC7B,iCAAiC;AAEjC,+BAA8E;AAEjE,QAAA,eAAe,GAAG,oEAAoE,CAAC;AACvF,QAAA,GAAG,GAAG,UAAU,CAAC;AACjB,QAAA,EAAE,GAAG,wBAAwB,CAAC;AAI3C,0FAA0F;AAC1F,SAAgB,mBAAmB,CAAC,OAAmB;IACrD,OAAQ,OAAe,CAAC,iBAAiB,CAAC;AAC5C,CAAC;AAFD,kDAEC;AAED,SAAgB,KAAK,CAAC,GAAW;IAC/B,MAAM,IAAI,KAAK,CAAC,mBAAmB,GAAG,EAAE,CAAC,CAAC;AAC5C,CAAC;AAFD,sBAEC;AAED,SAAgB,SAAS,CAAC,GAAW;IACnC,MAAM,sBAAW,CAAC,GAAG,CAAC,CAAC;AACzB,CAAC;AAFD,8BAEC;AAED,SAAgB,uBAAuB,CAAC,WAAmB;IACzD,OAAO;QACL,IAAI,EAAE,SAAS;QACf,KAAK,EAAE,SAAS;QAChB,MAAM,EAAE,SAAS;QACjB,QAAQ,EAAE,EAAE,CAAC,kBAAkB,CAAC,OAAO,EAAE,WAAW;QACpD,IAAI,EAAE,wBAAkB;QACxB,MAAM,EAAE,YAAM;KACf,CAAC;AACJ,CAAC;AATD,0DASC;AAED,SAAgB,WAAW,CAAC,QAAgB,EAAE,OAAwB;IACpE,OAAO,CAAC,OAAO,CAAC,OAAO,IAAI,oBAAoB,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAC7E,CAAC;AAFD,kCAEC;AAED,SAAgB,kBAAkB,CAAC,QAAgB,EAAE,QAAkB;IACrE,IAAI,CAAC,QAAQ;QAAE,OAAO,QAAQ,CAAC;IAC/B,KAAK,MAAM,GAAG,IAAI,QAAQ,IAAI,EAAE,EAAE;QAChC,MAAM,GAAG,GAAG,oBAAoB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QAChD,IAAI,GAAG,EAAE;YACP,OAAO,GAAG,CAAC;SACZ;KACF;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AATD,gDASC;AAED,SAAS,oBAAoB,CAAC,MAAc,EAAE,QAAgB;IAC5D,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC5C,OAAO,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;AAC3C,CAAC;AAED;;;;;GAKG;AACH,SAAgB,gBAAgB,CAAC,EAAc;IAC7C,IAAI,IAA6B,CAAC;IAClC,IAAI,KAAuB,CAAC;IAC5B,IAAI,MAAwB,CAAC;IAC7B,IAAI,EAAE,CAAC,IAAI,EAAE;QACX,2CAA2C;QAC3C,yEAAyE;QACzE,uCAAuC;QACvC,IAAI,GAAG,EAAE,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAmB,CAAC;QAC/F,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAC7B,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC;KACrC;IACD,OAAO;QACL,IAAI;QACJ,WAAW,EAAE,EAAE,CAAC,WAAW;QAC3B,QAAQ,EAAE,EAAE,CAAC,QAAQ;QACrB,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM;KAC7B,CAAC;AACJ,CAAC;AAlBD,4CAkBC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {syntaxError} from '@angular/compiler';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {CompilerOptions, DEFAULT_ERROR_CODE, Diagnostic, SOURCE} from './api';\n\nexport const GENERATED_FILES = /(.*?)\\.(ngfactory|shim\\.ngstyle|ngstyle|ngsummary)\\.(js|d\\.ts|ts)$/;\nexport const DTS = /\\.d\\.ts$/;\nexport const TS = /^(?!.*\\.d\\.ts$).*\\.ts$/;\n\nexport const enum StructureIsReused {Not = 0, SafeModules = 1, Completely = 2}\n\n// Note: This is an internal property in TypeScript. Use it only for assertions and tests.\nexport function tsStructureIsReused(program: ts.Program): StructureIsReused {\n  return (program as any).structureIsReused;\n}\n\nexport function error(msg: string): never {\n  throw new Error(`Internal error: ${msg}`);\n}\n\nexport function userError(msg: string): never {\n  throw syntaxError(msg);\n}\n\nexport function createMessageDiagnostic(messageText: string): ts.Diagnostic&Diagnostic {\n  return {\n    file: undefined,\n    start: undefined,\n    length: undefined,\n    category: ts.DiagnosticCategory.Message, messageText,\n    code: DEFAULT_ERROR_CODE,\n    source: SOURCE,\n  };\n}\n\nexport function isInRootDir(fileName: string, options: CompilerOptions) {\n  return !options.rootDir || pathStartsWithPrefix(options.rootDir, fileName);\n}\n\nexport function relativeToRootDirs(filePath: string, rootDirs: string[]): string {\n  if (!filePath) return filePath;\n  for (const dir of rootDirs || []) {\n    const rel = pathStartsWithPrefix(dir, filePath);\n    if (rel) {\n      return rel;\n    }\n  }\n  return filePath;\n}\n\nfunction pathStartsWithPrefix(prefix: string, fullPath: string): string|null {\n  const rel = path.relative(prefix, fullPath);\n  return rel.startsWith('..') ? null : rel;\n}\n\n/**\n * Converts a ng.Diagnostic into a ts.Diagnostic.\n * This looses some information, and also uses an incomplete object as `file`.\n *\n * I.e. only use this where the API allows only a ts.Diagnostic.\n */\nexport function ngToTsDiagnostic(ng: Diagnostic): ts.Diagnostic {\n  let file: ts.SourceFile|undefined;\n  let start: number|undefined;\n  let length: number|undefined;\n  if (ng.span) {\n    // Note: We can't use a real ts.SourceFile,\n    // but we can at least mirror the properties `fileName` and `text`, which\n    // are mostly used for error reporting.\n    file = { fileName: ng.span.start.file.url, text: ng.span.start.file.content } as ts.SourceFile;\n    start = ng.span.start.offset;\n    length = ng.span.end.offset - start;\n  }\n  return {\n    file,\n    messageText: ng.messageText,\n    category: ng.category,\n    code: ng.code, start, length,\n  };\n}\n"]}