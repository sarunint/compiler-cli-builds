{"version":3,"file":"expression_type.js","sourceRoot":"","sources":["../../../../../packages/compiler-cli/src/diagnostics/expression_type.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AST, AstVisitor, Binary, BindingPipe, Chain, Conditional, FunctionCall, ImplicitReceiver, Interpolation, KeyedRead, KeyedWrite, LiteralArray, LiteralMap, LiteralPrimitive, MethodCall, NonNullAssert, PrefixNot, PropertyRead, PropertyWrite, Quote, SafeMethodCall, SafePropertyRead, visitAstChildren} from '@angular/compiler';\n\nimport {BuiltinType, Signature, Span, Symbol, SymbolQuery, SymbolTable} from './symbols';\n\nexport interface ExpressionDiagnosticsContext { event?: boolean; }\n\nexport enum DiagnosticKind {\n  Error,\n  Warning,\n}\n\nexport class TypeDiagnostic {\n  constructor(public kind: DiagnosticKind, public message: string, public ast: AST) {}\n}\n\n// AstType calculatetype of the ast given AST element.\nexport class AstType implements AstVisitor {\n  // TODO(issue/24571): remove '!'.\n  public diagnostics !: TypeDiagnostic[];\n\n  constructor(\n      private scope: SymbolTable, private query: SymbolQuery,\n      private context: ExpressionDiagnosticsContext) {}\n\n  getType(ast: AST): Symbol { return ast.visit(this); }\n\n  getDiagnostics(ast: AST): TypeDiagnostic[] {\n    this.diagnostics = [];\n    const type: Symbol = ast.visit(this);\n    if (this.context.event && type.callable) {\n      this.reportWarning('Unexpected callable expression. Expected a method call', ast);\n    }\n    return this.diagnostics;\n  }\n\n  visitBinary(ast: Binary): Symbol {\n    // Treat undefined and null as other.\n    function normalize(kind: BuiltinType, other: BuiltinType): BuiltinType {\n      switch (kind) {\n        case BuiltinType.Undefined:\n        case BuiltinType.Null:\n          return normalize(other, BuiltinType.Other);\n      }\n      return kind;\n    }\n\n    const getType = (ast: AST, operation: string): Symbol => {\n      const type = this.getType(ast);\n      if (type.nullable) {\n        switch (operation) {\n          case '&&':\n          case '||':\n          case '==':\n          case '!=':\n          case '===':\n          case '!==':\n            // Nullable allowed.\n            break;\n          default:\n            this.reportError(`The expression might be null`, ast);\n            break;\n        }\n        return this.query.getNonNullableType(type);\n      }\n      return type;\n    };\n\n    const leftType = getType(ast.left, ast.operation);\n    const rightType = getType(ast.right, ast.operation);\n    const leftRawKind = this.query.getTypeKind(leftType);\n    const rightRawKind = this.query.getTypeKind(rightType);\n    const leftKind = normalize(leftRawKind, rightRawKind);\n    const rightKind = normalize(rightRawKind, leftRawKind);\n\n    // The following swtich implements operator typing similar to the\n    // type production tables in the TypeScript specification.\n    // https://github.com/Microsoft/TypeScript/blob/v1.8.10/doc/spec.md#4.19\n    const operKind = leftKind << 8 | rightKind;\n    switch (ast.operation) {\n      case '*':\n      case '/':\n      case '%':\n      case '-':\n      case '<<':\n      case '>>':\n      case '>>>':\n      case '&':\n      case '^':\n      case '|':\n        switch (operKind) {\n          case BuiltinType.Any << 8 | BuiltinType.Any:\n          case BuiltinType.Number << 8 | BuiltinType.Any:\n          case BuiltinType.Any << 8 | BuiltinType.Number:\n          case BuiltinType.Number << 8 | BuiltinType.Number:\n            return this.query.getBuiltinType(BuiltinType.Number);\n          default:\n            let errorAst = ast.left;\n            switch (leftKind) {\n              case BuiltinType.Any:\n              case BuiltinType.Number:\n                errorAst = ast.right;\n                break;\n            }\n            return this.reportError('Expected a numeric type', errorAst);\n        }\n      case '+':\n        switch (operKind) {\n          case BuiltinType.Any << 8 | BuiltinType.Any:\n          case BuiltinType.Any << 8 | BuiltinType.Boolean:\n          case BuiltinType.Any << 8 | BuiltinType.Number:\n          case BuiltinType.Any << 8 | BuiltinType.Other:\n          case BuiltinType.Boolean << 8 | BuiltinType.Any:\n          case BuiltinType.Number << 8 | BuiltinType.Any:\n          case BuiltinType.Other << 8 | BuiltinType.Any:\n            return this.anyType;\n          case BuiltinType.Any << 8 | BuiltinType.String:\n          case BuiltinType.Boolean << 8 | BuiltinType.String:\n          case BuiltinType.Number << 8 | BuiltinType.String:\n          case BuiltinType.String << 8 | BuiltinType.Any:\n          case BuiltinType.String << 8 | BuiltinType.Boolean:\n          case BuiltinType.String << 8 | BuiltinType.Number:\n          case BuiltinType.String << 8 | BuiltinType.String:\n          case BuiltinType.String << 8 | BuiltinType.Other:\n          case BuiltinType.Other << 8 | BuiltinType.String:\n            return this.query.getBuiltinType(BuiltinType.String);\n          case BuiltinType.Number << 8 | BuiltinType.Number:\n            return this.query.getBuiltinType(BuiltinType.Number);\n          case BuiltinType.Boolean << 8 | BuiltinType.Number:\n          case BuiltinType.Other << 8 | BuiltinType.Number:\n            return this.reportError('Expected a number type', ast.left);\n          case BuiltinType.Number << 8 | BuiltinType.Boolean:\n          case BuiltinType.Number << 8 | BuiltinType.Other:\n            return this.reportError('Expected a number type', ast.right);\n          default:\n            return this.reportError('Expected operands to be a string or number type', ast);\n        }\n      case '>':\n      case '<':\n      case '<=':\n      case '>=':\n      case '==':\n      case '!=':\n      case '===':\n      case '!==':\n        switch (operKind) {\n          case BuiltinType.Any << 8 | BuiltinType.Any:\n          case BuiltinType.Any << 8 | BuiltinType.Boolean:\n          case BuiltinType.Any << 8 | BuiltinType.Number:\n          case BuiltinType.Any << 8 | BuiltinType.String:\n          case BuiltinType.Any << 8 | BuiltinType.Other:\n          case BuiltinType.Boolean << 8 | BuiltinType.Any:\n          case BuiltinType.Boolean << 8 | BuiltinType.Boolean:\n          case BuiltinType.Number << 8 | BuiltinType.Any:\n          case BuiltinType.Number << 8 | BuiltinType.Number:\n          case BuiltinType.String << 8 | BuiltinType.Any:\n          case BuiltinType.String << 8 | BuiltinType.String:\n          case BuiltinType.Other << 8 | BuiltinType.Any:\n          case BuiltinType.Other << 8 | BuiltinType.Other:\n            return this.query.getBuiltinType(BuiltinType.Boolean);\n          default:\n            return this.reportError('Expected the operants to be of similar type or any', ast);\n        }\n      case '&&':\n        return rightType;\n      case '||':\n        return this.query.getTypeUnion(leftType, rightType);\n    }\n\n    return this.reportError(`Unrecognized operator ${ast.operation}`, ast);\n  }\n\n  visitChain(ast: Chain) {\n    if (this.diagnostics) {\n      // If we are producing diagnostics, visit the children\n      visitAstChildren(ast, this);\n    }\n    // The type of a chain is always undefined.\n    return this.query.getBuiltinType(BuiltinType.Undefined);\n  }\n\n  visitConditional(ast: Conditional) {\n    // The type of a conditional is the union of the true and false conditions.\n    if (this.diagnostics) {\n      visitAstChildren(ast, this);\n    }\n    return this.query.getTypeUnion(this.getType(ast.trueExp), this.getType(ast.falseExp));\n  }\n\n  visitFunctionCall(ast: FunctionCall) {\n    // The type of a function call is the return type of the selected signature.\n    // The signature is selected based on the types of the arguments. Angular doesn't\n    // support contextual typing of arguments so this is simpler than TypeScript's\n    // version.\n    const args = ast.args.map(arg => this.getType(arg));\n    const target = this.getType(ast.target !);\n    if (!target || !target.callable) return this.reportError('Call target is not callable', ast);\n    const signature = target.selectSignature(args);\n    if (signature) return signature.result;\n    // TODO: Consider a better error message here.\n    return this.reportError('Unable no compatible signature found for call', ast);\n  }\n\n  visitImplicitReceiver(ast: ImplicitReceiver): Symbol {\n    const _this = this;\n    // Return a pseudo-symbol for the implicit receiver.\n    // The members of the implicit receiver are what is defined by the\n    // scope passed into this class.\n    return {\n      name: '$implict',\n      kind: 'component',\n      language: 'ng-template',\n      type: undefined,\n      container: undefined,\n      callable: false,\n      nullable: false,\n      public: true,\n      definition: undefined,\n      members(): SymbolTable{return _this.scope;},\n      signatures(): Signature[]{return [];},\n      selectSignature(types): Signature | undefined{return undefined;},\n      indexed(argument): Symbol | undefined{return undefined;}\n    };\n  }\n\n  visitInterpolation(ast: Interpolation): Symbol {\n    // If we are producing diagnostics, visit the children.\n    if (this.diagnostics) {\n      visitAstChildren(ast, this);\n    }\n    return this.undefinedType;\n  }\n\n  visitKeyedRead(ast: KeyedRead): Symbol {\n    const targetType = this.getType(ast.obj);\n    const keyType = this.getType(ast.key);\n    const result = targetType.indexed(keyType);\n    return result || this.anyType;\n  }\n\n  visitKeyedWrite(ast: KeyedWrite): Symbol {\n    // The write of a type is the type of the value being written.\n    return this.getType(ast.value);\n  }\n\n  visitLiteralArray(ast: LiteralArray): Symbol {\n    // A type literal is an array type of the union of the elements\n    return this.query.getArrayType(\n        this.query.getTypeUnion(...ast.expressions.map(element => this.getType(element))));\n  }\n\n  visitLiteralMap(ast: LiteralMap): Symbol {\n    // If we are producing diagnostics, visit the children\n    if (this.diagnostics) {\n      visitAstChildren(ast, this);\n    }\n    // TODO: Return a composite type.\n    return this.anyType;\n  }\n\n  visitLiteralPrimitive(ast: LiteralPrimitive) {\n    // The type of a literal primitive depends on the value of the literal.\n    switch (ast.value) {\n      case true:\n      case false:\n        return this.query.getBuiltinType(BuiltinType.Boolean);\n      case null:\n        return this.query.getBuiltinType(BuiltinType.Null);\n      case undefined:\n        return this.query.getBuiltinType(BuiltinType.Undefined);\n      default:\n        switch (typeof ast.value) {\n          case 'string':\n            return this.query.getBuiltinType(BuiltinType.String);\n          case 'number':\n            return this.query.getBuiltinType(BuiltinType.Number);\n          default:\n            return this.reportError('Unrecognized primitive', ast);\n        }\n    }\n  }\n\n  visitMethodCall(ast: MethodCall) {\n    return this.resolveMethodCall(this.getType(ast.receiver), ast);\n  }\n\n  visitPipe(ast: BindingPipe) {\n    // The type of a pipe node is the return type of the pipe's transform method. The table returned\n    // by getPipes() is expected to contain symbols with the corresponding transform method type.\n    const pipe = this.query.getPipes().get(ast.name);\n    if (!pipe) return this.reportError(`No pipe by the name ${ast.name} found`, ast);\n    const expType = this.getType(ast.exp);\n    const signature =\n        pipe.selectSignature([expType].concat(ast.args.map(arg => this.getType(arg))));\n    if (!signature) return this.reportError('Unable to resolve signature for pipe invocation', ast);\n    return signature.result;\n  }\n\n  visitPrefixNot(ast: PrefixNot) {\n    // The type of a prefix ! is always boolean.\n    return this.query.getBuiltinType(BuiltinType.Boolean);\n  }\n\n  visitNonNullAssert(ast: NonNullAssert) {\n    const expressionType = this.getType(ast.expression);\n    return this.query.getNonNullableType(expressionType);\n  }\n\n  visitPropertyRead(ast: PropertyRead) {\n    return this.resolvePropertyRead(this.getType(ast.receiver), ast);\n  }\n\n  visitPropertyWrite(ast: PropertyWrite) {\n    // The type of a write is the type of the value being written.\n    return this.getType(ast.value);\n  }\n\n  visitQuote(ast: Quote) {\n    // The type of a quoted expression is any.\n    return this.query.getBuiltinType(BuiltinType.Any);\n  }\n\n  visitSafeMethodCall(ast: SafeMethodCall) {\n    return this.resolveMethodCall(this.query.getNonNullableType(this.getType(ast.receiver)), ast);\n  }\n\n  visitSafePropertyRead(ast: SafePropertyRead) {\n    return this.resolvePropertyRead(this.query.getNonNullableType(this.getType(ast.receiver)), ast);\n  }\n\n  // TODO(issue/24571): remove '!'.\n  private _anyType !: Symbol;\n  private get anyType(): Symbol {\n    let result = this._anyType;\n    if (!result) {\n      result = this._anyType = this.query.getBuiltinType(BuiltinType.Any);\n    }\n    return result;\n  }\n\n  // TODO(issue/24571): remove '!'.\n  private _undefinedType !: Symbol;\n  private get undefinedType(): Symbol {\n    let result = this._undefinedType;\n    if (!result) {\n      result = this._undefinedType = this.query.getBuiltinType(BuiltinType.Undefined);\n    }\n    return result;\n  }\n\n  private resolveMethodCall(receiverType: Symbol, ast: SafeMethodCall|MethodCall) {\n    if (this.isAny(receiverType)) {\n      return this.anyType;\n    }\n\n    // The type of a method is the selected methods result type.\n    const method = receiverType.members().get(ast.name);\n    if (!method) return this.reportError(`Unknown method '${ast.name}'`, ast);\n    if (!method.type) return this.reportError(`Could not find a type for '${ast.name}'`, ast);\n    if (!method.type.callable) return this.reportError(`Member '${ast.name}' is not callable`, ast);\n    const signature = method.type.selectSignature(ast.args.map(arg => this.getType(arg)));\n    if (!signature)\n      return this.reportError(`Unable to resolve signature for call of method ${ast.name}`, ast);\n    return signature.result;\n  }\n\n  private resolvePropertyRead(receiverType: Symbol, ast: SafePropertyRead|PropertyRead) {\n    if (this.isAny(receiverType)) {\n      return this.anyType;\n    }\n\n    // The type of a property read is the seelcted member's type.\n    const member = receiverType.members().get(ast.name);\n    if (!member) {\n      let receiverInfo = receiverType.name;\n      if (receiverInfo == '$implict') {\n        receiverInfo =\n            'The component declaration, template variable declarations, and element references do';\n      } else if (receiverType.nullable) {\n        return this.reportError(`The expression might be null`, ast.receiver);\n      } else {\n        receiverInfo = `'${receiverInfo}' does`;\n      }\n      return this.reportError(\n          `Identifier '${ast.name}' is not defined. ${receiverInfo} not contain such a member`,\n          ast);\n    }\n    if (!member.public) {\n      let receiverInfo = receiverType.name;\n      if (receiverInfo == '$implict') {\n        receiverInfo = 'the component';\n      } else {\n        receiverInfo = `'${receiverInfo}'`;\n      }\n      this.reportWarning(\n          `Identifier '${ast.name}' refers to a private member of ${receiverInfo}`, ast);\n    }\n    return member.type;\n  }\n\n  private reportError(message: string, ast: AST): Symbol {\n    if (this.diagnostics) {\n      this.diagnostics.push(new TypeDiagnostic(DiagnosticKind.Error, message, ast));\n    }\n    return this.anyType;\n  }\n\n  private reportWarning(message: string, ast: AST): Symbol {\n    if (this.diagnostics) {\n      this.diagnostics.push(new TypeDiagnostic(DiagnosticKind.Warning, message, ast));\n    }\n    return this.anyType;\n  }\n\n  private isAny(symbol: Symbol): boolean {\n    return !symbol || this.query.getTypeKind(symbol) == BuiltinType.Any ||\n        (!!symbol.type && this.isAny(symbol.type));\n  }\n}"]}