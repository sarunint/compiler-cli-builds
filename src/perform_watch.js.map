{"version":3,"file":"perform_watch.js","sourceRoot":"","sources":["../../../../packages/compiler-cli/src/perform_watch.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as chokidar from 'chokidar';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {Diagnostics, ParsedConfiguration, PerformCompilationResult, exitCodeFromResult, performCompilation, readConfiguration} from './perform_compile';\nimport * as api from './transformers/api';\nimport {createCompilerHost} from './transformers/entry_points';\nimport {createMessageDiagnostic} from './transformers/util';\n\nfunction totalCompilationTimeDiagnostic(timeInMillis: number): api.Diagnostic {\n  let duration: string;\n  if (timeInMillis > 1000) {\n    duration = `${(timeInMillis / 1000).toPrecision(2)}s`;\n  } else {\n    duration = `${timeInMillis}ms`;\n  }\n  return {\n    category: ts.DiagnosticCategory.Message,\n    messageText: `Total time: ${duration}`,\n    code: api.DEFAULT_ERROR_CODE,\n    source: api.SOURCE,\n  };\n}\n\nexport enum FileChangeEvent {\n  Change,\n  CreateDelete,\n  CreateDeleteDir,\n}\n\nexport interface PerformWatchHost {\n  reportDiagnostics(diagnostics: Diagnostics): void;\n  readConfiguration(): ParsedConfiguration;\n  createCompilerHost(options: api.CompilerOptions): api.CompilerHost;\n  createEmitCallback(options: api.CompilerOptions): api.TsEmitCallback|undefined;\n  onFileChange(\n      options: api.CompilerOptions, listener: (event: FileChangeEvent, fileName: string) => void,\n      ready: () => void): {close: () => void};\n  setTimeout(callback: () => void, ms: number): any;\n  clearTimeout(timeoutId: any): void;\n}\n\nexport function createPerformWatchHost(\n    configFileName: string, reportDiagnostics: (diagnostics: Diagnostics) => void,\n    existingOptions?: ts.CompilerOptions, createEmitCallback?: (options: api.CompilerOptions) =>\n                                              api.TsEmitCallback | undefined): PerformWatchHost {\n  return {\n    reportDiagnostics: reportDiagnostics,\n    createCompilerHost: options => createCompilerHost({options}),\n    readConfiguration: () => readConfiguration(configFileName, existingOptions),\n    createEmitCallback: options => createEmitCallback ? createEmitCallback(options) : undefined,\n    onFileChange: (options, listener, ready: () => void) => {\n      if (!options.basePath) {\n        reportDiagnostics([{\n          category: ts.DiagnosticCategory.Error,\n          messageText: 'Invalid configuration option. baseDir not specified',\n          source: api.SOURCE,\n          code: api.DEFAULT_ERROR_CODE\n        }]);\n        return {close: () => {}};\n      }\n      const watcher = chokidar.watch(options.basePath, {\n        // ignore .dotfiles, .js and .map files.\n        // can't ignore other files as we e.g. want to recompile if an `.html` file changes as well.\n        ignored: /((^[\\/\\\\])\\..)|(\\.js$)|(\\.map$)|(\\.metadata\\.json)/,\n        ignoreInitial: true,\n        persistent: true,\n      });\n      watcher.on('all', (event: string, path: string) => {\n        switch (event) {\n          case 'change':\n            listener(FileChangeEvent.Change, path);\n            break;\n          case 'unlink':\n          case 'add':\n            listener(FileChangeEvent.CreateDelete, path);\n            break;\n          case 'unlinkDir':\n          case 'addDir':\n            listener(FileChangeEvent.CreateDeleteDir, path);\n            break;\n        }\n      });\n      watcher.on('ready', ready);\n      return {close: () => watcher.close(), ready};\n    },\n    setTimeout: (ts.sys.clearTimeout && ts.sys.setTimeout) || setTimeout,\n    clearTimeout: (ts.sys.setTimeout && ts.sys.clearTimeout) || clearTimeout,\n  };\n}\n\ninterface CacheEntry {\n  exists?: boolean;\n  sf?: ts.SourceFile;\n  content?: string;\n}\n\n/**\n * The logic in this function is adapted from `tsc.ts` from TypeScript.\n */\nexport function performWatchCompilation(host: PerformWatchHost):\n    {close: () => void, ready: (cb: () => void) => void, firstCompileResult: Diagnostics} {\n  let cachedProgram: api.Program|undefined;            // Program cached from last compilation\n  let cachedCompilerHost: api.CompilerHost|undefined;  // CompilerHost cached from last compilation\n  let cachedOptions: ParsedConfiguration|undefined;  // CompilerOptions cached from last compilation\n  let timerHandleForRecompilation: any;  // Handle for 0.25s wait timer to trigger recompilation\n\n  const ignoreFilesForWatch = new Set<string>();\n  const fileCache = new Map<string, CacheEntry>();\n\n  const firstCompileResult = doCompilation();\n\n  // Watch basePath, ignoring .dotfiles\n  let resolveReadyPromise: () => void;\n  const readyPromise = new Promise(resolve => resolveReadyPromise = resolve);\n  // Note: ! is ok as options are filled after the first compilation\n  // Note: ! is ok as resolvedReadyPromise is filled by the previous call\n  const fileWatcher =\n      host.onFileChange(cachedOptions !.options, watchedFileChanged, resolveReadyPromise !);\n\n  return {close, ready: cb => readyPromise.then(cb), firstCompileResult};\n\n  function cacheEntry(fileName: string): CacheEntry {\n    fileName = path.normalize(fileName);\n    let entry = fileCache.get(fileName);\n    if (!entry) {\n      entry = {};\n      fileCache.set(fileName, entry);\n    }\n    return entry;\n  }\n\n  function close() {\n    fileWatcher.close();\n    if (timerHandleForRecompilation) {\n      host.clearTimeout(timerHandleForRecompilation);\n      timerHandleForRecompilation = undefined;\n    }\n  }\n\n  // Invoked to perform initial compilation or re-compilation in watch mode\n  function doCompilation(): Diagnostics {\n    if (!cachedOptions) {\n      cachedOptions = host.readConfiguration();\n    }\n    if (cachedOptions.errors && cachedOptions.errors.length) {\n      host.reportDiagnostics(cachedOptions.errors);\n      return cachedOptions.errors;\n    }\n    const startTime = Date.now();\n    if (!cachedCompilerHost) {\n      cachedCompilerHost = host.createCompilerHost(cachedOptions.options);\n      const originalWriteFileCallback = cachedCompilerHost.writeFile;\n      cachedCompilerHost.writeFile = function(\n          fileName: string, data: string, writeByteOrderMark: boolean,\n          onError?: (message: string) => void, sourceFiles: ReadonlyArray<ts.SourceFile> = []) {\n        ignoreFilesForWatch.add(path.normalize(fileName));\n        return originalWriteFileCallback(fileName, data, writeByteOrderMark, onError, sourceFiles);\n      };\n      const originalFileExists = cachedCompilerHost.fileExists;\n      cachedCompilerHost.fileExists = function(fileName: string) {\n        const ce = cacheEntry(fileName);\n        if (ce.exists == null) {\n          ce.exists = originalFileExists.call(this, fileName);\n        }\n        return ce.exists !;\n      };\n      const originalGetSourceFile = cachedCompilerHost.getSourceFile;\n      cachedCompilerHost.getSourceFile = function(\n          fileName: string, languageVersion: ts.ScriptTarget) {\n        const ce = cacheEntry(fileName);\n        if (!ce.sf) {\n          ce.sf = originalGetSourceFile.call(this, fileName, languageVersion);\n        }\n        return ce.sf !;\n      };\n      const originalReadFile = cachedCompilerHost.readFile;\n      cachedCompilerHost.readFile = function(fileName: string) {\n        const ce = cacheEntry(fileName);\n        if (ce.content == null) {\n          ce.content = originalReadFile.call(this, fileName);\n        }\n        return ce.content !;\n      };\n    }\n    ignoreFilesForWatch.clear();\n    const oldProgram = cachedProgram;\n    // We clear out the `cachedProgram` here as a\n    // program can only be used as `oldProgram` 1x\n    cachedProgram = undefined;\n    const compileResult = performCompilation({\n      rootNames: cachedOptions.rootNames,\n      options: cachedOptions.options,\n      host: cachedCompilerHost,\n      oldProgram: oldProgram,\n      emitCallback: host.createEmitCallback(cachedOptions.options)\n    });\n\n    if (compileResult.diagnostics.length) {\n      host.reportDiagnostics(compileResult.diagnostics);\n    }\n\n    const endTime = Date.now();\n    if (cachedOptions.options.diagnostics) {\n      const totalTime = (endTime - startTime) / 1000;\n      host.reportDiagnostics([totalCompilationTimeDiagnostic(endTime - startTime)]);\n    }\n    const exitCode = exitCodeFromResult(compileResult.diagnostics);\n    if (exitCode == 0) {\n      cachedProgram = compileResult.program;\n      host.reportDiagnostics(\n          [createMessageDiagnostic('Compilation complete. Watching for file changes.')]);\n    } else {\n      host.reportDiagnostics(\n          [createMessageDiagnostic('Compilation failed. Watching for file changes.')]);\n    }\n\n    return compileResult.diagnostics;\n  }\n\n  function resetOptions() {\n    cachedProgram = undefined;\n    cachedCompilerHost = undefined;\n    cachedOptions = undefined;\n  }\n\n  function watchedFileChanged(event: FileChangeEvent, fileName: string) {\n    if (cachedOptions && event === FileChangeEvent.Change &&\n        // TODO(chuckj): validate that this is sufficient to skip files that were written.\n        // This assumes that the file path we write is the same file path we will receive in the\n        // change notification.\n        path.normalize(fileName) === path.normalize(cachedOptions.project)) {\n      // If the configuration file changes, forget everything and start the recompilation timer\n      resetOptions();\n    } else if (\n        event === FileChangeEvent.CreateDelete || event === FileChangeEvent.CreateDeleteDir) {\n      // If a file was added or removed, reread the configuration\n      // to determine the new list of root files.\n      cachedOptions = undefined;\n    }\n\n    if (event === FileChangeEvent.CreateDeleteDir) {\n      fileCache.clear();\n    } else {\n      fileCache.delete(path.normalize(fileName));\n    }\n\n    if (!ignoreFilesForWatch.has(path.normalize(fileName))) {\n      // Ignore the file if the file is one that was written by the compiler.\n      startTimerForRecompilation();\n    }\n  }\n\n  // Upon detecting a file change, wait for 250ms and then perform a recompilation. This gives batch\n  // operations (such as saving all modified files in an editor) a chance to complete before we kick\n  // off a new compilation.\n  function startTimerForRecompilation() {\n    if (timerHandleForRecompilation) {\n      host.clearTimeout(timerHandleForRecompilation);\n    }\n    timerHandleForRecompilation = host.setTimeout(recompile, 250);\n  }\n\n  function recompile() {\n    timerHandleForRecompilation = undefined;\n    host.reportDiagnostics(\n        [createMessageDiagnostic('File change detected. Starting incremental compilation.')]);\n    doCompilation();\n  }\n}\n"]}